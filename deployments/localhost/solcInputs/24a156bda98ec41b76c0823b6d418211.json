{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/access/MedicalAccess.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"../interfaces/IMedicalAccess.sol\";\nimport \"../libraries/PermissionsLib.sol\";\nimport \"../libraries/RegistryLib.sol\";\n\ncontract MedicalAccess is AccessControl, IMedicalAccess {\n    using PermissionsLib for PermissionsLib.AccessPermissionStorage;\n    using RegistryLib for RegistryLib.DoctorRegistry;\n    using RegistryLib for RegistryLib.PharmacistRegistry;\n\n    // Constants\n    bytes32 public constant override DOCTOR_ROLE = keccak256(\"DOCTOR_ROLE\");\n    bytes32 public constant override ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant override PHARMACIST_ROLE =\n        keccak256(\"PHARMACIST_ROLE\");\n    bytes32 public constant override PATIENT_ROLE = keccak256(\"PATIENT_ROLE\");\n\n    // Storage\n    PermissionsLib.AccessPermissionStorage private permissions;\n    RegistryLib.DoctorRegistry private doctors;\n    RegistryLib.PharmacistRegistry private pharmacists;\n\n    mapping(address => bool) public patientRegistry;\n    mapping(address => string) private patientDataCIDs;\n    mapping(address => AccessRequest[]) private accessRequests;\n    mapping(address => mapping(address => bytes)) private accessKeys;\n\n    bool public override emergencyPause;\n    uint256 public pauseExpiry;\n\n    constructor() {\n        _grantRole(ADMIN_ROLE, msg.sender);\n        _setRoleAdmin(DOCTOR_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(PHARMACIST_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(PATIENT_ROLE, ADMIN_ROLE);\n    }\n\n    modifier onlyAdmin() {\n        require(hasRole(ADMIN_ROLE, msg.sender), \"Caller is not an Admin\");\n        _;\n    }\n\n    modifier notPaused() {\n        if (emergencyPause && block.timestamp >= pauseExpiry) {\n            emergencyPause = false;\n        }\n        require(!emergencyPause, \"Contract paused\");\n        _;\n    }\n\n    function hasRole(\n        bytes32 role,\n        address account\n    ) public view override(AccessControl, IMedicalAccess) returns (bool) {\n        return super.hasRole(role, account);\n    }\n\n    function registerDoctor(\n        address doctorAddress,\n        string memory licenseHash,\n        uint256 licenseExpiry,\n        string memory name,\n        string memory specialization\n    ) external override onlyAdmin notPaused {\n        require(licenseExpiry > block.timestamp, \"License Expired\");\n        require(bytes(licenseHash).length > 0, \"Invalid License\");\n        require(doctorAddress != address(0), \"Invalid Address\");\n        require(bytes(name).length > 0, \"Name required\");\n        require(bytes(specialization).length > 0, \"Specialization required\");\n        require(\n            !doctors.doctorRegistry[doctorAddress].isActive,\n            \"Doctor already registered\"\n        );\n\n        _grantRole(DOCTOR_ROLE, doctorAddress);\n        doctors.registerDoctor(\n            doctorAddress,\n            licenseHash,\n            licenseExpiry,\n            name,\n            specialization\n        );\n        emit DoctorRegistered(doctorAddress, licenseHash, licenseExpiry);\n    }\n\n    function revokeDoctor(\n        address doctorAddress\n    ) external override onlyAdmin notPaused {\n        doctors.revokeDoctor(doctorAddress);\n        _revokeRole(DOCTOR_ROLE, doctorAddress);\n        emit DoctorRevoked(doctorAddress);\n    }\n\n    function registerPharmacist(\n        address pharmacistAddress,\n        string memory pharmacyId,\n        string memory pharmacyName\n    ) external override onlyAdmin notPaused {\n        require(pharmacistAddress != address(0), \"Invalid Address\");\n        require(\n            !pharmacists.pharmacistRegistry[pharmacistAddress].isVerified,\n            \"Pharmacist already Registered\"\n        );\n\n        _grantRole(PHARMACIST_ROLE, pharmacistAddress);\n        pharmacists.registerPharmacist(\n            pharmacistAddress,\n            pharmacyId,\n            pharmacyName\n        );\n        emit PharmacistRegistered(pharmacistAddress, pharmacyId);\n    }\n\n    function revokePharmacist(\n        address pharmacistAddress\n    ) external override onlyAdmin {\n        pharmacists.revokePharmacist(pharmacistAddress);\n        _revokeRole(PHARMACIST_ROLE, pharmacistAddress);\n        emit PharmacistRevoked(pharmacistAddress);\n    }\n\n    function registerPatient() external override notPaused {\n        require(!patientRegistry[msg.sender], \"Patient already registered\");\n        _grantRole(PATIENT_ROLE, msg.sender);\n        patientRegistry[msg.sender] = true;\n        emit PatientRegistered(msg.sender);\n    }\n\n    function grantTemporaryAccess(\n        address doctor,\n        string[] calldata dataFields,\n        uint256 duration\n    ) external override onlyRole(PATIENT_ROLE) {\n        require(hasRole(DOCTOR_ROLE, doctor), \"Not a valid doctor\");\n        require(duration > 0, \"Duration must be positive\");\n\n        uint256 requestId = permissions.grantTemporaryAccess(\n            doctor,\n            msg.sender,\n            dataFields,\n            duration\n        );\n        emit TemporaryAccessGranted(\n            requestId,\n            doctor,\n            msg.sender,\n            block.timestamp + duration,\n            dataFields\n        );\n    }\n\n    function extendAccess(\n        uint256 requestId,\n        uint256 additionalDuration\n    ) external override {\n        permissions.extendAccess(msg.sender, requestId, additionalDuration);\n        emit AccessExtended(requestId, block.timestamp + additionalDuration);\n    }\n\n    function revokeAccessEarly(uint256 requestId) external override {\n        permissions.revokeAccessEarly(msg.sender, requestId);\n        emit AccessRevokedEarly(requestId);\n    }\n\n    function requestAccess(\n        address patient,\n        string memory doctorName,\n        string memory hospital\n    ) external override onlyRole(DOCTOR_ROLE) {\n        uint256 requestId = permissions.nextRequestId;\n        accessRequests[patient].push(\n            AccessRequest({\n                id: requestId,\n                doctor: msg.sender,\n                patient: patient,\n                doctorName: doctorName,\n                hospital: hospital,\n                timestamp: block.timestamp,\n                fulfilled: false\n            })\n        );\n        permissions.nextRequestId++;\n        emit AccessRequested(requestId, msg.sender, patient);\n    }\n\n    function approveAccess(\n        uint256 requestId,\n        bytes memory encryptedKey\n    ) external override {\n        AccessRequest[] storage requests = accessRequests[msg.sender];\n        for (uint i = 0; i < requests.length; i++) {\n            if (requests[i].id == requestId) {\n                requests[i].fulfilled = true;\n                accessKeys[msg.sender][requests[i].doctor] = encryptedKey;\n                emit AccessApproved(requestId, requests[i].doctor, msg.sender);\n                return;\n            }\n        }\n        revert(\"Request not found\");\n    }\n\n    function revokeAccess(address doctor) external override {\n        // Revoke all permissions for this doctor\n        IMedicalAccess.AccessPermission[] storage patientPerms = permissions\n            .patientPermissions[msg.sender];\n        for (uint i = 0; i < patientPerms.length; i++) {\n            if (patientPerms[i].doctor == doctor && patientPerms[i].isActive) {\n                patientPerms[i].isActive = false;\n                emit AccessRevokedEarly(patientPerms[i].requestId);\n            }\n        }\n\n        delete accessKeys[msg.sender][doctor];\n        emit AccessRevoked(doctor, msg.sender);\n    }\n\n    function storeDataCID(\n        string calldata cid\n    ) external override onlyRole(PATIENT_ROLE) {\n        patientDataCIDs[msg.sender] = cid;\n        emit DataStored(msg.sender, cid);\n    }\n\n    function togglePause(uint256 durationHours) external override onlyAdmin {\n        emergencyPause = !emergencyPause;\n        pauseExpiry = emergencyPause\n            ? block.timestamp + (durationHours * 1 hours)\n            : 0;\n        emit PauseToggled(emergencyPause);\n    }\n\n    // View functions\n    function isActive(\n        address doctorAddress\n    ) external view override returns (bool) {\n        IMedicalAccess.DoctorProfile memory doc = doctors.doctorRegistry[\n            doctorAddress\n        ];\n        return\n            hasRole(DOCTOR_ROLE, doctorAddress) &&\n            doc.isActive &&\n            doc.expiryDate > block.timestamp;\n    }\n\n    function isVerifiedPharmacist(\n        address account\n    ) public view override returns (bool) {\n        return\n            hasRole(PHARMACIST_ROLE, account) &&\n            pharmacists.pharmacistRegistry[account].isVerified;\n    }\n\n    function getDoctor(\n        address doctorAddress\n    ) external view override returns (DoctorProfile memory) {\n        return doctors.getDoctor(doctorAddress);\n    }\n\n    function getPharmacist(\n        address pharmacistAddress\n    ) external view override returns (PharmacistProfile memory) {\n        return pharmacists.getPharmacist(pharmacistAddress);\n    }\n\n    function getAllDoctors() external view override returns (address[] memory) {\n        return doctors.getAllDoctors();\n    }\n\n    function getAllPharmacists()\n        external\n        view\n        override\n        returns (address[] memory)\n    {\n        return pharmacists.getAllPharmacists();\n    }\n\n    function getDoctorCount() external view override returns (uint256) {\n        return doctors.getDoctorCount();\n    }\n\n    function getPharmacistCount() external view override returns (uint256) {\n        return pharmacists.getPharmacistCount();\n    }\n\n    function getActivePermissions(\n        address patient\n    ) external view override returns (AccessPermission[] memory) {\n        return permissions.getActivePermissions(patient);\n    }\n\n    function getPatientCID(\n        address patient\n    ) external view override returns (string memory) {\n        require(\n            accessKeys[patient][msg.sender].length > 0 ||\n                hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\n            \"No access\"\n        );\n        return patientDataCIDs[patient];\n    }\n\n    function getAccessRequests(\n        address patient\n    ) external view override returns (AccessRequest[] memory) {\n        return accessRequests[patient];\n    }\n\n    function revokeRole(\n        bytes32 role,\n        address account\n    ) public override onlyRole(getRoleAdmin(role)) {\n        super.revokeRole(role, account);\n        emit RoleRevokedWithSender(role, account);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view override(AccessControl) returns (bool) {\n        return\n            interfaceId == type(IMedicalAccess).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/interfaces/IMedicalAccess.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ninterface IMedicalAccess {\n    struct AccessPermission {\n        uint256 requestId;\n        address doctor;\n        address patient;\n        uint256 expiryTime;\n        string[] dataFields; // e.g., [\"name\", \"dob\", \"allergies\"]\n        bool isActive;\n    }\n\n    // Struct Definitions\n    struct DoctorProfile {\n        string licenseHash;\n        uint256 expiryDate;\n        string name;\n        string specialization;\n        bool isActive;\n    }\n\n    struct PharmacistProfile {\n        string pharmacyId;\n        string pharmacyName;\n        bool isVerified;\n    }\n\n    // Events\n    event DoctorRegistered(\n        address indexed doctor,\n        string licenseHash,\n        uint256 expiry\n    );\n\n    struct AccessRequest {\n        uint256 id;\n        address doctor;\n        address patient;\n        string doctorName;\n        string hospital;\n        uint256 timestamp;\n        bool fulfilled;\n    }\n\n    event DoctorUpdated(address indexed doctor);\n    event DoctorRevoked(address indexed doctor);\n    event PharmacistRegistered(address indexed pharmacist, string pharmacyId);\n    event PharmacistRevoked(address indexed pharmacist);\n    event PatientRegistered(address indexed account);\n    event PauseToggled(bool isPaused);\n    event RoleRevokedWithSender(bytes32 indexed role, address indexed account);\n    event DataStored(address indexed patient, string cid);\n    event AccessRequested(\n        uint256 indexed requestId,\n        address indexed doctor,\n        address indexed patient\n    );\n    event AccessApproved(\n        uint256 indexed requestId,\n        address indexed doctor,\n        address indexed patient\n    );\n    event AccessRevoked(address indexed doctor, address indexed patient);\n    event TemporaryAccessGranted(\n        uint256 indexed requestId,\n        address indexed doctor,\n        address indexed patient,\n        uint256 expiryTime,\n        string[] dataFields\n    );\n    event AccessExtended(uint256 indexed requestId, uint256 newExpiry);\n    event AccessRevokedEarly(uint256 indexed requestId);\n\n    // Role Constants\n    function DOCTOR_ROLE() external pure returns (bytes32);\n\n    function PHARMACIST_ROLE() external pure returns (bytes32);\n\n    function ADMIN_ROLE() external pure returns (bytes32);\n\n    function PATIENT_ROLE() external view returns (bytes32);\n\n    // Role Verification\n    function isActive(address doctorAddress) external view returns (bool);\n\n    function isVerifiedPharmacist(\n        address pharmacistAddress\n    ) external view returns (bool);\n\n    function hasRole(\n        bytes32 role,\n        address account\n    ) external view returns (bool);\n\n    function requestAccess(\n        address patient,\n        string memory doctorName,\n        string memory hospital\n    ) external;\n\n    function approveAccess(\n        uint256 requestId,\n        bytes memory encryptedKey\n    ) external;\n\n    function revokeAccess(address doctor) external;\n\n    function storeDataCID(string calldata cid) external;\n\n    function grantTemporaryAccess(\n        address doctor,\n        string[] calldata dataFields,\n        uint256 duration\n    ) external;\n\n    function extendAccess(\n        uint256 requestId,\n        uint256 additionalDuration\n    ) external;\n\n    function revokeAccessEarly(uint256 requestId) external;\n\n    // Getters\n    function getDoctor(\n        address doctorAddress\n    ) external view returns (DoctorProfile memory);\n\n    function getPharmacist(\n        address pharmacistAddress\n    ) external view returns (PharmacistProfile memory);\n\n    function getAllDoctors() external view returns (address[] memory);\n\n    function getAllPharmacists() external view returns (address[] memory);\n\n    function getDoctorCount() external view returns (uint256);\n\n    function getPharmacistCount() external view returns (uint256);\n\n    function getActivePermissions(\n        address patient\n    ) external view returns (AccessPermission[] memory);\n\n    // Registration Functions\n    function registerDoctor(\n        address doctorAddress,\n        string memory licenseHash,\n        uint256 licenseExpiry,\n        string memory name,\n        string memory specialization\n    ) external;\n\n    function revokeDoctor(address doctorAddress) external;\n\n    function registerPharmacist(\n        address pharmacistAddress,\n        string memory pharmacyId,\n        string memory pharmacyName\n    ) external;\n\n    function revokePharmacist(address pharmacistAddress) external;\n\n    function registerPatient() external;\n\n    // function renewDoctorLicense(\n    //     address doctorAddress,\n    //     uint256 newExpiry\n    // ) external;\n\n    // System Controls\n    function togglePause(uint256 durationHours) external;\n\n    function getPatientCID(\n        address patient\n    ) external view returns (string memory);\n\n    function getAccessRequests(\n        address patient\n    ) external view returns (AccessRequest[] memory);\n\n    function emergencyPause() external view returns (bool);\n}\n"
    },
    "contracts/libraries/PermissionsLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"../interfaces/IMedicalAccess.sol\";\n\nlibrary PermissionsLib {\n    struct AccessPermissionStorage {\n        mapping(address => IMedicalAccess.AccessPermission[]) patientPermissions;\n        uint256 nextRequestId;\n    }\n\n    function grantTemporaryAccess(\n        AccessPermissionStorage storage self,\n        address doctor,\n        address patient,\n        string[] calldata dataFields,\n        uint256 duration\n    ) external returns (uint256 requestId) {\n        requestId = self.nextRequestId++;\n        uint256 expiryTime = block.timestamp + duration;\n\n        self.patientPermissions[patient].push(\n            IMedicalAccess.AccessPermission({\n                requestId: requestId,\n                doctor: doctor,\n                patient: patient,\n                expiryTime: expiryTime,\n                dataFields: dataFields,\n                isActive: true\n            })\n        );\n    }\n\n    function extendAccess(\n        AccessPermissionStorage storage self,\n        address patient,\n        uint256 requestId,\n        uint256 additionalDuration\n    ) external {\n        IMedicalAccess.AccessPermission[] storage permissions = self\n            .patientPermissions[patient];\n        for (uint i = 0; i < permissions.length; i++) {\n            if (permissions[i].requestId == requestId) {\n                require(permissions[i].isActive, \"Permission not active\");\n                permissions[i].expiryTime += additionalDuration;\n                return;\n            }\n        }\n        revert(\"Permission not found\");\n    }\n\n    function revokeAccessEarly(\n        AccessPermissionStorage storage self,\n        address patient,\n        uint256 requestId\n    ) external {\n        IMedicalAccess.AccessPermission[] storage permissions = self\n            .patientPermissions[patient];\n        for (uint i = 0; i < permissions.length; i++) {\n            if (permissions[i].requestId == requestId) {\n                require(permissions[i].isActive, \"Permission not active\");\n                permissions[i].isActive = false;\n                return;\n            }\n        }\n        revert(\"Permission not found\");\n    }\n\n    function getActivePermissions(\n        AccessPermissionStorage storage self,\n        address patient\n    ) external view returns (IMedicalAccess.AccessPermission[] memory) {\n        IMedicalAccess.AccessPermission[] storage all = self.patientPermissions[\n            patient\n        ];\n        uint256 activeCount = 0;\n\n        for (uint i = 0; i < all.length; i++) {\n            if (all[i].isActive && all[i].expiryTime > block.timestamp) {\n                activeCount++;\n            }\n        }\n\n        IMedicalAccess.AccessPermission[]\n            memory result = new IMedicalAccess.AccessPermission[](activeCount);\n        uint256 index = 0;\n\n        for (uint i = 0; i < all.length; i++) {\n            if (all[i].isActive && all[i].expiryTime > block.timestamp) {\n                result[index] = all[i];\n                index++;\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/libraries/RegistryLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"../interfaces/IMedicalAccess.sol\";\n\nlibrary RegistryLib {\n    struct DoctorRegistry {\n        mapping(address => IMedicalAccess.DoctorProfile) doctorRegistry;\n        mapping(address => uint256) doctorIndex;\n        address[] doctorList;\n    }\n\n    struct PharmacistRegistry {\n        mapping(address => IMedicalAccess.PharmacistProfile) pharmacistRegistry;\n        mapping(address => uint256) pharmacistIndex;\n        address[] pharmacistList;\n    }\n\n    function registerDoctor(\n        DoctorRegistry storage self,\n        address doctorAddress,\n        string memory licenseHash,\n        uint256 licenseExpiry,\n        string memory name,\n        string memory specialization\n    ) external {\n        self.doctorRegistry[doctorAddress] = IMedicalAccess.DoctorProfile({\n            licenseHash: licenseHash,\n            expiryDate: licenseExpiry,\n            name: name,\n            specialization: specialization,\n            isActive: true\n        });\n        self.doctorList.push(doctorAddress);\n        self.doctorIndex[doctorAddress] = self.doctorList.length;\n    }\n\n    function revokeDoctor(\n        DoctorRegistry storage self,\n        address doctorAddress\n    ) external {\n        uint256 index = self.doctorIndex[doctorAddress];\n        require(index > 0, \"Not an active doctor\");\n        require(\n            self.doctorRegistry[doctorAddress].isActive,\n            \"Not an active doctor\"\n        );\n\n        self.doctorList[index - 1] = self.doctorList[\n            self.doctorList.length - 1\n        ];\n        self.doctorIndex[self.doctorList[index - 1]] = index;\n        self.doctorList.pop();\n        self.doctorIndex[doctorAddress] = 0;\n\n        self.doctorRegistry[doctorAddress].isActive = false;\n    }\n\n    function registerPharmacist(\n        PharmacistRegistry storage self,\n        address pharmacistAddress,\n        string memory pharmacyId,\n        string memory pharmacyName\n    ) external {\n        self.pharmacistRegistry[pharmacistAddress] = IMedicalAccess\n            .PharmacistProfile({\n                pharmacyId: pharmacyId,\n                pharmacyName: pharmacyName,\n                isVerified: true\n            });\n        self.pharmacistList.push(pharmacistAddress);\n        self.pharmacistIndex[pharmacistAddress] = self.pharmacistList.length;\n    }\n\n    function revokePharmacist(\n        PharmacistRegistry storage self,\n        address pharmacistAddress\n    ) external {\n        uint256 index = self.pharmacistIndex[pharmacistAddress];\n        require(index > 0, \"Pharmacist not registered\");\n        require(\n            self.pharmacistRegistry[pharmacistAddress].isVerified,\n            \"Pharmacist not verified\"\n        );\n\n        self.pharmacistList[index - 1] = self.pharmacistList[\n            self.pharmacistList.length - 1\n        ];\n        self.pharmacistIndex[self.pharmacistList[index - 1]] = index;\n        self.pharmacistList.pop();\n        self.pharmacistIndex[pharmacistAddress] = 0;\n    }\n\n    function getDoctor(\n        DoctorRegistry storage self,\n        address doctorAddress\n    ) external view returns (IMedicalAccess.DoctorProfile memory) {\n        return self.doctorRegistry[doctorAddress];\n    }\n\n    function getPharmacist(\n        PharmacistRegistry storage self,\n        address pharmacistAddress\n    ) external view returns (IMedicalAccess.PharmacistProfile memory) {\n        return self.pharmacistRegistry[pharmacistAddress];\n    }\n\n    function getAllDoctors(\n        DoctorRegistry storage self\n    ) external view returns (address[] memory) {\n        return self.doctorList;\n    }\n\n    function getAllPharmacists(\n        PharmacistRegistry storage self\n    ) external view returns (address[] memory) {\n        return self.pharmacistList;\n    }\n\n    function getDoctorCount(\n        DoctorRegistry storage self\n    ) external view returns (uint256) {\n        return self.doctorList.length;\n    }\n\n    function getPharmacistCount(\n        PharmacistRegistry storage self\n    ) external view returns (uint256) {\n        return self.pharmacistList.length;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}