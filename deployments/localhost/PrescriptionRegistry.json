{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_medicalAccess",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prescriptionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "PrescriptionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prescriptionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pharmacist",
          "type": "address"
        }
      ],
      "name": "PrescriptionFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "patient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiryDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "prescriptionHash",
          "type": "string"
        }
      ],
      "name": "createPrescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prescriptionId",
          "type": "uint256"
        }
      ],
      "name": "fulfillPrescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        }
      ],
      "name": "getDoctorPrescriptions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "getPatientPrescriptions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prescriptionId",
          "type": "uint256"
        }
      ],
      "name": "getPrescription",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "doctor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "patient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryDate",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "prescriptionHash",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isFulfilled",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "fulfilledBy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fulfillmentDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPrescriptionRegistry.Prescription",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrescriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "medicalAccess",
      "outputs": [
        {
          "internalType": "contract IMedicalAccess",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prescriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prescriptionToken",
      "outputs": [
        {
          "internalType": "contract IPrescriptionToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_prescriptionToken",
          "type": "address"
        }
      ],
      "name": "setPrescriptionToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f0f7bcfd8854059835f79dbd385392af1f809ceec1469755d361929957b3561",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "2187654",
    "logsBloom": "0x
    "blockHash": "0x52759c00b5e036c1390346a76f726beb681588487fe8e61dec6a62833b4eb0fc",
    "transactionHash": "0x2f0f7bcfd8854059835f79dbd385392af1f809ceec1469755d361929957b3561",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x2f0f7bcfd8854059835f79dbd385392af1f809ceec1469755d361929957b3561",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x52759c00b5e036c1390346a76f726beb681588487fe8e61dec6a62833b4eb0fc"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "2187654",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "59ae38f1cb551820bd93d3d8a232d5e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_medicalAccess\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prescriptionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"PrescriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prescriptionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pharmacist\",\"type\":\"address\"}],\"name\":\"PrescriptionFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prescriptionHash\",\"type\":\"string\"}],\"name\":\"createPrescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prescriptionId\",\"type\":\"uint256\"}],\"name\":\"fulfillPrescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"}],\"name\":\"getDoctorPrescriptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"getPatientPrescriptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prescriptionId\",\"type\":\"uint256\"}],\"name\":\"getPrescription\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prescriptionHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"fulfilledBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fulfillmentDate\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrescriptionRegistry.Prescription\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrescriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"medicalAccess\",\"outputs\":[{\"internalType\":\"contract IMedicalAccess\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prescriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prescriptionToken\",\"outputs\":[{\"internalType\":\"contract IPrescriptionToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prescriptionToken\",\"type\":\"address\"}],\"name\":\"setPrescriptionToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prescription/PrescriptionRegistry.sol\":\"PrescriptionRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/interfaces/IMedicalAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\ninterface IMedicalAccess {\\n    struct AccessPermission {\\n        uint256 requestId;\\n        address doctor;\\n        address patient;\\n        uint256 expiryTime;\\n        string[] dataFields; // e.g., [\\\"name\\\", \\\"dob\\\", \\\"allergies\\\"]\\n        bool isActive;\\n    }\\n\\n    // Struct Definitions\\n    struct DoctorProfile {\\n        string licenseHash;\\n        uint256 expiryDate;\\n        string name;\\n        string specialization;\\n        bool isActive;\\n    }\\n\\n    struct PharmacistProfile {\\n        string pharmacyId;\\n        string pharmacyName;\\n        bool isVerified;\\n    }\\n\\n    // Events\\n    event DoctorRegistered(\\n        address indexed doctor,\\n        string licenseHash,\\n        uint256 expiry\\n    );\\n\\n    struct AccessRequest {\\n        uint256 id;\\n        address doctor;\\n        address patient;\\n        string doctorName;\\n        string hospital;\\n        uint256 timestamp;\\n        bool fulfilled;\\n    }\\n\\n    event DoctorUpdated(address indexed doctor);\\n    event DoctorRevoked(address indexed doctor);\\n    event PharmacistRegistered(address indexed pharmacist, string pharmacyId);\\n    event PharmacistRevoked(address indexed pharmacist);\\n    event PatientRegistered(address indexed account);\\n    event PauseToggled(bool isPaused);\\n    event RoleRevokedWithSender(bytes32 indexed role, address indexed account);\\n    event DataStored(address indexed patient, string cid);\\n    event AccessRequested(\\n        uint256 indexed requestId,\\n        address indexed doctor,\\n        address indexed patient\\n    );\\n    event AccessApproved(\\n        uint256 indexed requestId,\\n        address indexed doctor,\\n        address indexed patient\\n    );\\n    event AccessRevoked(address indexed doctor, address indexed patient);\\n    event TemporaryAccessGranted(\\n        uint256 indexed requestId,\\n        address indexed doctor,\\n        address indexed patient,\\n        uint256 expiryTime,\\n        string[] dataFields\\n    );\\n    event AccessExtended(uint256 indexed requestId, uint256 newExpiry);\\n    event AccessRevokedEarly(uint256 indexed requestId);\\n\\n    // Role Constants\\n    function DOCTOR_ROLE() external pure returns (bytes32);\\n\\n    function PHARMACIST_ROLE() external pure returns (bytes32);\\n\\n    function ADMIN_ROLE() external pure returns (bytes32);\\n\\n    function PATIENT_ROLE() external view returns (bytes32);\\n\\n    // Role Verification\\n    function isActive(address doctorAddress) external view returns (bool);\\n\\n    function isVerifiedPharmacist(\\n        address pharmacistAddress\\n    ) external view returns (bool);\\n\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool);\\n\\n    function requestAccess(\\n        address patient,\\n        string memory doctorName,\\n        string memory hospital\\n    ) external;\\n\\n    function approveAccess(\\n        uint256 requestId,\\n        bytes memory encryptedKey\\n    ) external;\\n\\n    function revokeAccess(address doctor) external;\\n\\n    function storeDataCID(string calldata cid) external;\\n\\n    function grantTemporaryAccess(\\n        address doctor,\\n        string[] calldata dataFields,\\n        uint256 duration\\n    ) external;\\n\\n    function extendAccess(\\n        uint256 requestId,\\n        address doctor,\\n        uint256 additionalDuration\\n    ) external;\\n\\n    function revokeAccessEarly(uint256 requestId, address doctor) external;\\n\\n    // Getters\\n    function getDoctor(\\n        address doctorAddress\\n    ) external view returns (DoctorProfile memory);\\n\\n    function getPharmacist(\\n        address pharmacistAddress\\n    ) external view returns (PharmacistProfile memory);\\n\\n    function getAllDoctors() external view returns (address[] memory);\\n\\n    function getAllPharmacists() external view returns (address[] memory);\\n\\n    function getDoctorCount() external view returns (uint256);\\n\\n    function getPharmacistCount() external view returns (uint256);\\n\\n    function getPatientPermissions()\\n        external\\n        view\\n        returns (AccessPermission[] memory);\\n\\n    function getDoctorAccess()\\n        external\\n        view\\n        returns (AccessPermission[] memory);\\n\\n    // Registration Functions\\n    function registerDoctor(\\n        address doctorAddress,\\n        string memory licenseHash,\\n        uint256 licenseExpiry,\\n        string memory name,\\n        string memory specialization\\n    ) external;\\n\\n    function revokeDoctor(address doctorAddress) external;\\n\\n    function registerPharmacist(\\n        address pharmacistAddress,\\n        string memory pharmacyId,\\n        string memory pharmacyName\\n    ) external;\\n\\n    function revokePharmacist(address pharmacistAddress) external;\\n\\n    function registerPatient() external;\\n\\n    // function renewDoctorLicense(\\n    //     address doctorAddress,\\n    //     uint256 newExpiry\\n    // ) external;\\n\\n    // System Controls\\n    function togglePause(uint256 durationHours) external;\\n\\n    function getPatientCID(\\n        address patient\\n    ) external view returns (string memory);\\n\\n    function getAccessRequests(\\n        address patient\\n    ) external view returns (AccessRequest[] memory);\\n\\n    function emergencyPause() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc70c3983299fe91f7704c26469e5d9f11c89f154d8322dee6782fe4ab7dcb6b1\",\"license\":\"MIT\"},\"contracts/interfaces/IPrescriptionRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\ninterface IPrescriptionRegistry {\\n    struct Prescription {\\n        address doctor;\\n        address patient;\\n        uint256 issueDate;\\n        uint256 expiryDate;\\n        string prescriptionHash;\\n        bool isFulfilled;\\n        address fulfilledBy;\\n        uint256 fulfillmentDate;\\n    }\\n\\n    event PrescriptionCreated(\\n        uint256 indexed prescriptionId,\\n        address indexed doctor,\\n        address indexed patient\\n    );\\n    event PrescriptionFulfilled(\\n        uint256 indexed prescriptionId,\\n        address indexed pharmacist\\n    );\\n\\n    function createPrescription(\\n        address patient,\\n        uint256 expiryDate,\\n        string calldata prescriptionHash\\n    ) external;\\n\\n    function fulfillPrescription(uint256 prescriptionId) external;\\n\\n    function getPrescription(\\n        uint256 prescriptionId\\n    ) external view returns (Prescription memory);\\n\\n    function getPatientPrescriptions(\\n        address patient\\n    ) external view returns (uint256[] memory);\\n\\n    function getDoctorPrescriptions(\\n        address doctor\\n    ) external view returns (uint256[] memory);\\n\\n    function getPrescriptionCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdb9ffdc235c33928edcaf4430bdb2b03ad2718ab1e8abb0756a5f0cf74cc7a3b\",\"license\":\"MIT\"},\"contracts/interfaces/IPrescriptionToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPrescriptionToken is IERC721 {\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        string calldata tokenURI\\n    ) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function isPrescriptionToken(uint256 tokenId) external view returns (bool);\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function getBaseURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf7a49f58e1bdbfb946050d56a54ff35b843fb76fd5981e50eba629b871a61207\",\"license\":\"MIT\"},\"contracts/prescription/PrescriptionRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../interfaces/IMedicalAccess.sol\\\";\\nimport \\\"../interfaces/IPrescriptionRegistry.sol\\\";\\nimport \\\"../interfaces/IPrescriptionToken.sol\\\";\\n\\ncontract PrescriptionRegistry is AccessControl, IPrescriptionRegistry {\\n    IMedicalAccess public medicalAccess;\\n    IPrescriptionToken public prescriptionToken;\\n\\n    uint256 public prescriptionCount;\\n    mapping(uint256 => Prescription) private _prescriptions;\\n    mapping(address => uint256[]) private _patientPrescriptions;\\n    mapping(address => uint256[]) private _doctorPrescriptions;\\n\\n    constructor(address _medicalAccess) {\\n        medicalAccess = IMedicalAccess(_medicalAccess);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function setPrescriptionToken(\\n        address _prescriptionToken\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        prescriptionToken = IPrescriptionToken(_prescriptionToken);\\n    }\\n\\n    function createPrescription(\\n        address patient,\\n        uint256 expiryDate,\\n        string calldata prescriptionHash\\n    ) external override {\\n        require(medicalAccess.isActive(msg.sender), \\\"Unauthorized\\\");\\n        require(expiryDate > block.timestamp, \\\"Invalid expiry\\\");\\n        require(\\n            medicalAccess.hasRole(medicalAccess.PATIENT_ROLE(), patient),\\n            \\\"Invalid patient\\\"\\n        );\\n\\n        uint256 newId = ++prescriptionCount;\\n        _prescriptions[newId] = Prescription({\\n            doctor: msg.sender,\\n            patient: patient,\\n            issueDate: block.timestamp,\\n            expiryDate: expiryDate,\\n            prescriptionHash: prescriptionHash,\\n            isFulfilled: false,\\n            fulfilledBy: address(0),\\n            fulfillmentDate: 0\\n        });\\n\\n        _patientPrescriptions[patient].push(newId);\\n        _doctorPrescriptions[msg.sender].push(newId);\\n\\n        if (address(prescriptionToken) != address(0)) {\\n            prescriptionToken.mint(patient, newId, prescriptionHash);\\n        }\\n\\n        emit PrescriptionCreated(newId, msg.sender, patient);\\n    }\\n\\n    function fulfillPrescription(uint256 prescriptionId) external override {\\n        require(medicalAccess.isVerifiedPharmacist(msg.sender), \\\"Unauthorized\\\");\\n        Prescription storage prescription = _prescriptions[prescriptionId];\\n        require(prescription.doctor != address(0), \\\"Invalid prescription\\\");\\n        require(!prescription.isFulfilled, \\\"Already fulfilled\\\");\\n        require(\\n            prescription.expiryDate > block.timestamp,\\n            \\\"Prescription expired\\\"\\n        );\\n\\n        prescription.isFulfilled = true;\\n        prescription.fulfilledBy = msg.sender;\\n        prescription.fulfillmentDate = block.timestamp;\\n\\n        if (address(prescriptionToken) != address(0)) {\\n            prescriptionToken.burn(prescriptionId);\\n        }\\n\\n        emit PrescriptionFulfilled(prescriptionId, msg.sender);\\n    }\\n\\n    function getPrescription(\\n        uint256 prescriptionId\\n    ) external view override returns (Prescription memory) {\\n        return _prescriptions[prescriptionId];\\n    }\\n\\n    function getPatientPrescriptions(\\n        address patient\\n    ) external view override returns (uint256[] memory) {\\n        return _patientPrescriptions[patient];\\n    }\\n\\n    function getDoctorPrescriptions(\\n        address doctor\\n    ) external view override returns (uint256[] memory) {\\n        return _doctorPrescriptions[doctor];\\n    }\\n\\n    function getPrescriptionCount() external view override returns (uint256) {\\n        return prescriptionCount;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(AccessControl) returns (bool) {\\n        return\\n            interfaceId == type(IPrescriptionRegistry).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x6c437a1f6fff69c1636c8f44b80ef470da3ca6d5164e5c1f56d612409a72c29b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161284c38038061284c8339818101604052810190610032919061025f565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100866000801b3361008d60201b60201c565b505061028c565b600061009f838361018a60201b60201c565b61017f57600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061011c6101f460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050610184565b600090505b92915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061022c82610201565b9050919050565b61023c81610221565b811461024757600080fd5b50565b60008151905061025981610233565b92915050565b600060208284031215610275576102746101fc565b5b60006102838482850161024a565b91505092915050565b6125b18061029b6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636f16af10116100a25780639652d4ab116100715780639652d4ab146102c8578063a217fddf146102e6578063a4c54e7714610304578063b655849814610334578063d547741f146103525761010b565b80636f16af101461021a57806381932ac41461024a5780638a462e1a1461026857806391d14854146102985761010b565b80632cb20441116100de5780632cb20441146101aa5780632f2ff15d146101c657806336568abe146101e2578063686e9062146101fe5761010b565b806301ffc9a7146101105780630c49e8401461014057806322c12a9b1461015c578063248a9ca31461017a575b600080fd5b61012a6004803603810190610125919061179e565b61036e565b60405161013791906117e6565b60405180910390f35b61015a6004803603810190610155919061185f565b6103e8565b005b61016461043a565b60405161017191906118a5565b60405180910390f35b610194600480360381019061018f91906118f6565b610444565b6040516101a19190611932565b60405180910390f35b6101c460048036038101906101bf91906119de565b610463565b005b6101e060048036038101906101db9190611a52565b610b22565b005b6101fc60048036038101906101f79190611a52565b610b44565b005b61021860048036038101906102139190611a92565b610bbf565b005b610234600480360381019061022f9190611a92565b610f71565b6040516102419190611c2c565b60405180910390f35b61025261116c565b60405161025f9190611cad565b60405180910390f35b610282600480360381019061027d919061185f565b611192565b60405161028f9190611d77565b60405180910390f35b6102b260048036038101906102ad9190611a52565b611229565b6040516102bf91906117e6565b60405180910390f35b6102d0611293565b6040516102dd9190611dba565b60405180910390f35b6102ee6112b9565b6040516102fb9190611932565b60405180910390f35b61031e6004803603810190610319919061185f565b6112c0565b60405161032b9190611d77565b60405180910390f35b61033c611357565b60405161034991906118a5565b60405180910390f35b61036c60048036038101906103679190611a52565b61135d565b005b60007f278871c5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103e157506103e08261137f565b5b9050919050565b6000801b6103f5816113f9565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600354905090565b6000806000838152602001908152602001600020600101549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8a13d7336040518263ffffffff1660e01b81526004016104be9190611de4565b602060405180830381865afa1580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff9190611e2b565b61053e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053590611eb5565b60405180910390fd5b428311610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057790611f21565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d14854600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac5cb97d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561062b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064f9190611f56565b866040518363ffffffff1660e01b815260040161066d929190611f83565b602060405180830381865afa15801561068a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ae9190611e2b565b6106ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e490611ff8565b60405180910390fd5b60006003600081546106fe90612047565b91905081905590506040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200142815260200185815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152506004600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030155608082015181600401908161089591906122c0565b5060a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160060155905050600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ac057600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d3fc9864868386866040518563ffffffff1660e01b8152600401610a8d94939291906123ce565b600060405180830381600087803b158015610aa757600080fd5b505af1158015610abb573d6000803e3d6000fd5b505050505b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16827f71d940cbfc82410e0b18e63896ef651239da8c4875128cfa30d1637278d0267060405160405180910390a45050505050565b610b2b82610444565b610b34816113f9565b610b3e838361140d565b50505050565b610b4c6114fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bb0576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bba8282611506565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356f25d27336040518263ffffffff1660e01b8152600401610c1a9190611de4565b602060405180830381865afa158015610c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b9190611e2b565b610c9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9190611eb5565b60405180910390fd5b6000600460008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610d44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3b9061245a565b60405180910390fd5b8060050160009054906101000a900460ff1615610d96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8d906124c6565b60405180910390fd5b42816003015411610ddc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd390612532565b60405180910390fd5b60018160050160006101000a81548160ff021916908315150217905550338160050160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160060181905550600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f2957600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b8152600401610ef691906118a5565b600060405180830381600087803b158015610f1057600080fd5b505af1158015610f24573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff16827f1fd747d593a3abe3d63a6823e8452fc4a810ea6aedf557a8fd0e6af7db71f4b660405160405180910390a35050565b610f796116b3565b60046000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482018054611068906120ed565b80601f0160208091040260200160405190810160405280929190818152602001828054611094906120ed565b80156110e15780601f106110b6576101008083540402835291602001916110e1565b820191906000526020600020905b8154815290600101906020018083116110c457829003601f168201915b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815250509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561121d57602002820191906000526020600020905b815481526020019060010190808311611209575b50505050509050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b81565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561134b57602002820191906000526020600020905b815481526020019060010190808311611337575b50505050509050919050565b60035481565b61136682610444565b61136f816113f9565b6113798383611506565b50505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806113f257506113f1826115f8565b5b9050919050565b61140a816114056114fe565b611662565b50565b60006114198383611229565b6114f357600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506114906114fe565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506114f8565b600090505b92915050565b600033905090565b60006115128383611229565b156115ed57600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061158a6114fe565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a4600190506115f2565b600090505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61166c8282611229565b6116af5780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016116a6929190612552565b60405180910390fd5b5050565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160608152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61177b81611746565b811461178657600080fd5b50565b60008135905061179881611772565b92915050565b6000602082840312156117b4576117b361173c565b5b60006117c284828501611789565b91505092915050565b60008115159050919050565b6117e0816117cb565b82525050565b60006020820190506117fb60008301846117d7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061182c82611801565b9050919050565b61183c81611821565b811461184757600080fd5b50565b60008135905061185981611833565b92915050565b6000602082840312156118755761187461173c565b5b60006118838482850161184a565b91505092915050565b6000819050919050565b61189f8161188c565b82525050565b60006020820190506118ba6000830184611896565b92915050565b6000819050919050565b6118d3816118c0565b81146118de57600080fd5b50565b6000813590506118f0816118ca565b92915050565b60006020828403121561190c5761190b61173c565b5b600061191a848285016118e1565b91505092915050565b61192c816118c0565b82525050565b60006020820190506119476000830184611923565b92915050565b6119568161188c565b811461196157600080fd5b50565b6000813590506119738161194d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261199e5761199d611979565b5b8235905067ffffffffffffffff8111156119bb576119ba61197e565b5b6020830191508360018202830111156119d7576119d6611983565b5b9250929050565b600080600080606085870312156119f8576119f761173c565b5b6000611a068782880161184a565b9450506020611a1787828801611964565b935050604085013567ffffffffffffffff811115611a3857611a37611741565b5b611a4487828801611988565b925092505092959194509250565b60008060408385031215611a6957611a6861173c565b5b6000611a77858286016118e1565b9250506020611a888582860161184a565b9150509250929050565b600060208284031215611aa857611aa761173c565b5b6000611ab684828501611964565b91505092915050565b611ac881611821565b82525050565b611ad78161188c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b17578082015181840152602081019050611afc565b60008484015250505050565b6000601f19601f8301169050919050565b6000611b3f82611add565b611b498185611ae8565b9350611b59818560208601611af9565b611b6281611b23565b840191505092915050565b611b76816117cb565b82525050565b600061010083016000830151611b956000860182611abf565b506020830151611ba86020860182611abf565b506040830151611bbb6040860182611ace565b506060830151611bce6060860182611ace565b5060808301518482036080860152611be68282611b34565b91505060a0830151611bfb60a0860182611b6d565b5060c0830151611c0e60c0860182611abf565b5060e0830151611c2160e0860182611ace565b508091505092915050565b60006020820190508181036000830152611c468184611b7c565b905092915050565b6000819050919050565b6000611c73611c6e611c6984611801565b611c4e565b611801565b9050919050565b6000611c8582611c58565b9050919050565b6000611c9782611c7a565b9050919050565b611ca781611c8c565b82525050565b6000602082019050611cc26000830184611c9e565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611d008383611ace565b60208301905092915050565b6000602082019050919050565b6000611d2482611cc8565b611d2e8185611cd3565b9350611d3983611ce4565b8060005b83811015611d6a578151611d518882611cf4565b9750611d5c83611d0c565b925050600181019050611d3d565b5085935050505092915050565b60006020820190508181036000830152611d918184611d19565b905092915050565b6000611da482611c7a565b9050919050565b611db481611d99565b82525050565b6000602082019050611dcf6000830184611dab565b92915050565b611dde81611821565b82525050565b6000602082019050611df96000830184611dd5565b92915050565b611e08816117cb565b8114611e1357600080fd5b50565b600081519050611e2581611dff565b92915050565b600060208284031215611e4157611e4061173c565b5b6000611e4f84828501611e16565b91505092915050565b600082825260208201905092915050565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b6000611e9f600c83611e58565b9150611eaa82611e69565b602082019050919050565b60006020820190508181036000830152611ece81611e92565b9050919050565b7f496e76616c696420657870697279000000000000000000000000000000000000600082015250565b6000611f0b600e83611e58565b9150611f1682611ed5565b602082019050919050565b60006020820190508181036000830152611f3a81611efe565b9050919050565b600081519050611f50816118ca565b92915050565b600060208284031215611f6c57611f6b61173c565b5b6000611f7a84828501611f41565b91505092915050565b6000604082019050611f986000830185611923565b611fa56020830184611dd5565b9392505050565b7f496e76616c69642070617469656e740000000000000000000000000000000000600082015250565b6000611fe2600f83611e58565b9150611fed82611fac565b602082019050919050565b6000602082019050818103600083015261201181611fd5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006120528261188c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361208457612083612018565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061210557607f821691505b602082108103612118576121176120be565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026121807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612143565b61218a8683612143565b95508019841693508086168417925050509392505050565b60006121bd6121b86121b38461188c565b611c4e565b61188c565b9050919050565b6000819050919050565b6121d7836121a2565b6121eb6121e3826121c4565b848454612150565b825550505050565b600090565b6122006121f3565b61220b8184846121ce565b505050565b5b8181101561222f576122246000826121f8565b600181019050612211565b5050565b601f821115612274576122458161211e565b61224e84612133565b8101602085101561225d578190505b61227161226985612133565b830182612210565b50505b505050565b600082821c905092915050565b600061229760001984600802612279565b1980831691505092915050565b60006122b08383612286565b9150826002028217905092915050565b6122c982611add565b67ffffffffffffffff8111156122e2576122e161208f565b5b6122ec82546120ed565b6122f7828285612233565b600060209050601f83116001811461232a5760008415612318578287015190505b61232285826122a4565b86555061238a565b601f1984166123388661211e565b60005b828110156123605784890151825560018201915060208501945060208101905061233b565b8683101561237d5784890151612379601f891682612286565b8355505b6001600288020188555050505b505050505050565b82818337600083830152505050565b60006123ad8385611e58565b93506123ba838584612392565b6123c383611b23565b840190509392505050565b60006060820190506123e36000830187611dd5565b6123f06020830186611896565b81810360408301526124038184866123a1565b905095945050505050565b7f496e76616c696420707265736372697074696f6e000000000000000000000000600082015250565b6000612444601483611e58565b915061244f8261240e565b602082019050919050565b6000602082019050818103600083015261247381612437565b9050919050565b7f416c72656164792066756c66696c6c6564000000000000000000000000000000600082015250565b60006124b0601183611e58565b91506124bb8261247a565b602082019050919050565b600060208201905081810360008301526124df816124a3565b9050919050565b7f507265736372697074696f6e2065787069726564000000000000000000000000600082015250565b600061251c601483611e58565b9150612527826124e6565b602082019050919050565b6000602082019050818103600083015261254b8161250f565b9050919050565b60006040820190506125676000830185611dd5565b6125746020830184611923565b939250505056fea2646970667358221220ce8a625d1f3741869b1a2b1182bbcd505d37c1af7095b20faa4794cc6135257a64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80636f16af10116100a25780639652d4ab116100715780639652d4ab146102c8578063a217fddf146102e6578063a4c54e7714610304578063b655849814610334578063d547741f146103525761010b565b80636f16af101461021a57806381932ac41461024a5780638a462e1a1461026857806391d14854146102985761010b565b80632cb20441116100de5780632cb20441146101aa5780632f2ff15d146101c657806336568abe146101e2578063686e9062146101fe5761010b565b806301ffc9a7146101105780630c49e8401461014057806322c12a9b1461015c578063248a9ca31461017a575b600080fd5b61012a6004803603810190610125919061179e565b61036e565b60405161013791906117e6565b60405180910390f35b61015a6004803603810190610155919061185f565b6103e8565b005b61016461043a565b60405161017191906118a5565b60405180910390f35b610194600480360381019061018f91906118f6565b610444565b6040516101a19190611932565b60405180910390f35b6101c460048036038101906101bf91906119de565b610463565b005b6101e060048036038101906101db9190611a52565b610b22565b005b6101fc60048036038101906101f79190611a52565b610b44565b005b61021860048036038101906102139190611a92565b610bbf565b005b610234600480360381019061022f9190611a92565b610f71565b6040516102419190611c2c565b60405180910390f35b61025261116c565b60405161025f9190611cad565b60405180910390f35b610282600480360381019061027d919061185f565b611192565b60405161028f9190611d77565b60405180910390f35b6102b260048036038101906102ad9190611a52565b611229565b6040516102bf91906117e6565b60405180910390f35b6102d0611293565b6040516102dd9190611dba565b60405180910390f35b6102ee6112b9565b6040516102fb9190611932565b60405180910390f35b61031e6004803603810190610319919061185f565b6112c0565b60405161032b9190611d77565b60405180910390f35b61033c611357565b60405161034991906118a5565b60405180910390f35b61036c60048036038101906103679190611a52565b61135d565b005b60007f278871c5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103e157506103e08261137f565b5b9050919050565b6000801b6103f5816113f9565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600354905090565b6000806000838152602001908152602001600020600101549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8a13d7336040518263ffffffff1660e01b81526004016104be9190611de4565b602060405180830381865afa1580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff9190611e2b565b61053e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053590611eb5565b60405180910390fd5b428311610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057790611f21565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d14854600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac5cb97d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561062b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064f9190611f56565b866040518363ffffffff1660e01b815260040161066d929190611f83565b602060405180830381865afa15801561068a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ae9190611e2b565b6106ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e490611ff8565b60405180910390fd5b60006003600081546106fe90612047565b91905081905590506040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200142815260200185815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152506004600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030155608082015181600401908161089591906122c0565b5060a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160060155905050600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ac057600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d3fc9864868386866040518563ffffffff1660e01b8152600401610a8d94939291906123ce565b600060405180830381600087803b158015610aa757600080fd5b505af1158015610abb573d6000803e3d6000fd5b505050505b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16827f71d940cbfc82410e0b18e63896ef651239da8c4875128cfa30d1637278d0267060405160405180910390a45050505050565b610b2b82610444565b610b34816113f9565b610b3e838361140d565b50505050565b610b4c6114fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bb0576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bba8282611506565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356f25d27336040518263ffffffff1660e01b8152600401610c1a9190611de4565b602060405180830381865afa158015610c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b9190611e2b565b610c9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9190611eb5565b60405180910390fd5b6000600460008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610d44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3b9061245a565b60405180910390fd5b8060050160009054906101000a900460ff1615610d96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8d906124c6565b60405180910390fd5b42816003015411610ddc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd390612532565b60405180910390fd5b60018160050160006101000a81548160ff021916908315150217905550338160050160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160060181905550600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f2957600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b8152600401610ef691906118a5565b600060405180830381600087803b158015610f1057600080fd5b505af1158015610f24573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff16827f1fd747d593a3abe3d63a6823e8452fc4a810ea6aedf557a8fd0e6af7db71f4b660405160405180910390a35050565b610f796116b3565b60046000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482018054611068906120ed565b80601f0160208091040260200160405190810160405280929190818152602001828054611094906120ed565b80156110e15780601f106110b6576101008083540402835291602001916110e1565b820191906000526020600020905b8154815290600101906020018083116110c457829003601f168201915b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815250509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561121d57602002820191906000526020600020905b815481526020019060010190808311611209575b50505050509050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b81565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561134b57602002820191906000526020600020905b815481526020019060010190808311611337575b50505050509050919050565b60035481565b61136682610444565b61136f816113f9565b6113798383611506565b50505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806113f257506113f1826115f8565b5b9050919050565b61140a816114056114fe565b611662565b50565b60006114198383611229565b6114f357600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506114906114fe565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506114f8565b600090505b92915050565b600033905090565b60006115128383611229565b156115ed57600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061158a6114fe565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a4600190506115f2565b600090505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61166c8282611229565b6116af5780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016116a6929190612552565b60405180910390fd5b5050565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160608152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61177b81611746565b811461178657600080fd5b50565b60008135905061179881611772565b92915050565b6000602082840312156117b4576117b361173c565b5b60006117c284828501611789565b91505092915050565b60008115159050919050565b6117e0816117cb565b82525050565b60006020820190506117fb60008301846117d7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061182c82611801565b9050919050565b61183c81611821565b811461184757600080fd5b50565b60008135905061185981611833565b92915050565b6000602082840312156118755761187461173c565b5b60006118838482850161184a565b91505092915050565b6000819050919050565b61189f8161188c565b82525050565b60006020820190506118ba6000830184611896565b92915050565b6000819050919050565b6118d3816118c0565b81146118de57600080fd5b50565b6000813590506118f0816118ca565b92915050565b60006020828403121561190c5761190b61173c565b5b600061191a848285016118e1565b91505092915050565b61192c816118c0565b82525050565b60006020820190506119476000830184611923565b92915050565b6119568161188c565b811461196157600080fd5b50565b6000813590506119738161194d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261199e5761199d611979565b5b8235905067ffffffffffffffff8111156119bb576119ba61197e565b5b6020830191508360018202830111156119d7576119d6611983565b5b9250929050565b600080600080606085870312156119f8576119f761173c565b5b6000611a068782880161184a565b9450506020611a1787828801611964565b935050604085013567ffffffffffffffff811115611a3857611a37611741565b5b611a4487828801611988565b925092505092959194509250565b60008060408385031215611a6957611a6861173c565b5b6000611a77858286016118e1565b9250506020611a888582860161184a565b9150509250929050565b600060208284031215611aa857611aa761173c565b5b6000611ab684828501611964565b91505092915050565b611ac881611821565b82525050565b611ad78161188c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b17578082015181840152602081019050611afc565b60008484015250505050565b6000601f19601f8301169050919050565b6000611b3f82611add565b611b498185611ae8565b9350611b59818560208601611af9565b611b6281611b23565b840191505092915050565b611b76816117cb565b82525050565b600061010083016000830151611b956000860182611abf565b506020830151611ba86020860182611abf565b506040830151611bbb6040860182611ace565b506060830151611bce6060860182611ace565b5060808301518482036080860152611be68282611b34565b91505060a0830151611bfb60a0860182611b6d565b5060c0830151611c0e60c0860182611abf565b5060e0830151611c2160e0860182611ace565b508091505092915050565b60006020820190508181036000830152611c468184611b7c565b905092915050565b6000819050919050565b6000611c73611c6e611c6984611801565b611c4e565b611801565b9050919050565b6000611c8582611c58565b9050919050565b6000611c9782611c7a565b9050919050565b611ca781611c8c565b82525050565b6000602082019050611cc26000830184611c9e565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611d008383611ace565b60208301905092915050565b6000602082019050919050565b6000611d2482611cc8565b611d2e8185611cd3565b9350611d3983611ce4565b8060005b83811015611d6a578151611d518882611cf4565b9750611d5c83611d0c565b925050600181019050611d3d565b5085935050505092915050565b60006020820190508181036000830152611d918184611d19565b905092915050565b6000611da482611c7a565b9050919050565b611db481611d99565b82525050565b6000602082019050611dcf6000830184611dab565b92915050565b611dde81611821565b82525050565b6000602082019050611df96000830184611dd5565b92915050565b611e08816117cb565b8114611e1357600080fd5b50565b600081519050611e2581611dff565b92915050565b600060208284031215611e4157611e4061173c565b5b6000611e4f84828501611e16565b91505092915050565b600082825260208201905092915050565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b6000611e9f600c83611e58565b9150611eaa82611e69565b602082019050919050565b60006020820190508181036000830152611ece81611e92565b9050919050565b7f496e76616c696420657870697279000000000000000000000000000000000000600082015250565b6000611f0b600e83611e58565b9150611f1682611ed5565b602082019050919050565b60006020820190508181036000830152611f3a81611efe565b9050919050565b600081519050611f50816118ca565b92915050565b600060208284031215611f6c57611f6b61173c565b5b6000611f7a84828501611f41565b91505092915050565b6000604082019050611f986000830185611923565b611fa56020830184611dd5565b9392505050565b7f496e76616c69642070617469656e740000000000000000000000000000000000600082015250565b6000611fe2600f83611e58565b9150611fed82611fac565b602082019050919050565b6000602082019050818103600083015261201181611fd5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006120528261188c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361208457612083612018565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061210557607f821691505b602082108103612118576121176120be565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026121807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612143565b61218a8683612143565b95508019841693508086168417925050509392505050565b60006121bd6121b86121b38461188c565b611c4e565b61188c565b9050919050565b6000819050919050565b6121d7836121a2565b6121eb6121e3826121c4565b848454612150565b825550505050565b600090565b6122006121f3565b61220b8184846121ce565b505050565b5b8181101561222f576122246000826121f8565b600181019050612211565b5050565b601f821115612274576122458161211e565b61224e84612133565b8101602085101561225d578190505b61227161226985612133565b830182612210565b50505b505050565b600082821c905092915050565b600061229760001984600802612279565b1980831691505092915050565b60006122b08383612286565b9150826002028217905092915050565b6122c982611add565b67ffffffffffffffff8111156122e2576122e161208f565b5b6122ec82546120ed565b6122f7828285612233565b600060209050601f83116001811461232a5760008415612318578287015190505b61232285826122a4565b86555061238a565b601f1984166123388661211e565b60005b828110156123605784890151825560018201915060208501945060208101905061233b565b8683101561237d5784890151612379601f891682612286565b8355505b6001600288020188555050505b505050505050565b82818337600083830152505050565b60006123ad8385611e58565b93506123ba838584612392565b6123c383611b23565b840190509392505050565b60006060820190506123e36000830187611dd5565b6123f06020830186611896565b81810360408301526124038184866123a1565b905095945050505050565b7f496e76616c696420707265736372697074696f6e000000000000000000000000600082015250565b6000612444601483611e58565b915061244f8261240e565b602082019050919050565b6000602082019050818103600083015261247381612437565b9050919050565b7f416c72656164792066756c66696c6c6564000000000000000000000000000000600082015250565b60006124b0601183611e58565b91506124bb8261247a565b602082019050919050565b600060208201905081810360008301526124df816124a3565b9050919050565b7f507265736372697074696f6e2065787069726564000000000000000000000000600082015250565b600061251c601483611e58565b9150612527826124e6565b602082019050919050565b6000602082019050818103600083015261254b8161250f565b9050919050565b60006040820190506125676000830185611dd5565b6125746020830184611923565b939250505056fea2646970667358221220ce8a625d1f3741869b1a2b1182bbcd505d37c1af7095b20faa4794cc6135257a64736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 3023,
        "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
        "label": "medicalAccess",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMedicalAccess)1934"
      },
      {
        "astId": 3026,
        "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
        "label": "prescriptionToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPrescriptionToken)2048"
      },
      {
        "astId": 3028,
        "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
        "label": "prescriptionCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3033,
        "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
        "label": "_prescriptions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Prescription)1953_storage)"
      },
      {
        "astId": 3038,
        "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
        "label": "_patientPrescriptions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3043,
        "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
        "label": "_doctorPrescriptions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMedicalAccess)1934": {
        "encoding": "inplace",
        "label": "contract IMedicalAccess",
        "numberOfBytes": "20"
      },
      "t_contract(IPrescriptionToken)2048": {
        "encoding": "inplace",
        "label": "contract IPrescriptionToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_uint256,t_struct(Prescription)1953_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPrescriptionRegistry.Prescription)",
        "numberOfBytes": "32",
        "value": "t_struct(Prescription)1953_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Prescription)1953_storage": {
        "encoding": "inplace",
        "label": "struct IPrescriptionRegistry.Prescription",
        "members": [
          {
            "astId": 1938,
            "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
            "label": "doctor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1940,
            "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
            "label": "patient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1942,
            "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
            "label": "issueDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1944,
            "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
            "label": "expiryDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1946,
            "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
            "label": "prescriptionHash",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1948,
            "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
            "label": "isFulfilled",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 1950,
            "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
            "label": "fulfilledBy",
            "offset": 1,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1952,
            "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
            "label": "fulfillmentDate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/prescription/PrescriptionRegistry.sol:PrescriptionRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}