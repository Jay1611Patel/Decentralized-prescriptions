{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "AccessApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExpiry",
          "type": "uint256"
        }
      ],
      "name": "AccessExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "AccessRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "AccessRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "AccessRevokedEarly",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "cid",
          "type": "string"
        }
      ],
      "name": "DataStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "licenseHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "DoctorRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        }
      ],
      "name": "DoctorRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        }
      ],
      "name": "DoctorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PatientRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "name": "PauseToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pharmacist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "pharmacyId",
          "type": "string"
        }
      ],
      "name": "PharmacistRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pharmacist",
          "type": "address"
        }
      ],
      "name": "PharmacistRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleRevokedWithSender",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "dataFields",
          "type": "string[]"
        }
      ],
      "name": "TemporaryAccessGranted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOCTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PATIENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PHARMACIST_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "encryptedKey",
          "type": "bytes"
        }
      ],
      "name": "approveAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "additionalDuration",
          "type": "uint256"
        }
      ],
      "name": "extendAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "getAccessRequests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "doctor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "patient",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "doctorName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "hospital",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "fulfilled",
              "type": "bool"
            }
          ],
          "internalType": "struct IMedicalAccess.AccessRequest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "getActivePermissions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "requestId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "doctor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "patient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiryTime",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "dataFields",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct IMedicalAccess.AccessPermission[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllDoctors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPharmacists",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        }
      ],
      "name": "getDoctor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "licenseHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "expiryDate",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "specialization",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct IMedicalAccess.DoctorProfile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDoctorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "getPatientCID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pharmacistAddress",
          "type": "address"
        }
      ],
      "name": "getPharmacist",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "pharmacyId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "pharmacyName",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isVerified",
              "type": "bool"
            }
          ],
          "internalType": "struct IMedicalAccess.PharmacistProfile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPharmacistCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "dataFields",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "grantTemporaryAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isVerifiedPharmacist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "patientRegistry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "licenseHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "licenseExpiry",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "specialization",
          "type": "string"
        }
      ],
      "name": "registerDoctor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerPatient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pharmacistAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "pharmacyId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "pharmacyName",
          "type": "string"
        }
      ],
      "name": "registerPharmacist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "patient",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "doctorName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hospital",
          "type": "string"
        }
      ],
      "name": "requestAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        }
      ],
      "name": "revokeAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "revokeAccessEarly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        }
      ],
      "name": "revokeDoctor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pharmacistAddress",
          "type": "address"
        }
      ],
      "name": "revokePharmacist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        }
      ],
      "name": "storeDataCID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "durationHours",
          "type": "uint256"
        }
      ],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b2120d1a6c9c50e410aa4c0b8251d00c7e07d275be9481ea6bebe9f4932224e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "5090132",
    "logsBloom": "0x
    "blockHash": "0x02c3200edc1291496f1f46b389723a76adb41e51f671ed99eaf346500da06ff2",
    "transactionHash": "0x5b2120d1a6c9c50e410aa4c0b8251d00c7e07d275be9481ea6bebe9f4932224e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x5b2120d1a6c9c50e410aa4c0b8251d00c7e07d275be9481ea6bebe9f4932224e",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x02c3200edc1291496f1f46b389723a76adb41e51f671ed99eaf346500da06ff2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x5b2120d1a6c9c50e410aa4c0b8251d00c7e07d275be9481ea6bebe9f4932224e",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x02c3200edc1291496f1f46b389723a76adb41e51f671ed99eaf346500da06ff2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x5b2120d1a6c9c50e410aa4c0b8251d00c7e07d275be9481ea6bebe9f4932224e",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de68",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x02c3200edc1291496f1f46b389723a76adb41e51f671ed99eaf346500da06ff2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x5b2120d1a6c9c50e410aa4c0b8251d00c7e07d275be9481ea6bebe9f4932224e",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x02c3200edc1291496f1f46b389723a76adb41e51f671ed99eaf346500da06ff2"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "5090132",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "21e007abe199724924244b7389e086b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"AccessApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpiry\",\"type\":\"uint256\"}],\"name\":\"AccessExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"AccessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"AccessRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"AccessRevokedEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"DataStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"licenseHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"DoctorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"}],\"name\":\"DoctorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"}],\"name\":\"DoctorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PatientRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pharmacist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pharmacyId\",\"type\":\"string\"}],\"name\":\"PharmacistRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pharmacist\",\"type\":\"address\"}],\"name\":\"PharmacistRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevokedWithSender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"dataFields\",\"type\":\"string[]\"}],\"name\":\"TemporaryAccessGranted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOCTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PATIENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PHARMACIST_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"}],\"name\":\"approveAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalDuration\",\"type\":\"uint256\"}],\"name\":\"extendAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"getAccessRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"doctorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hospital\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"internalType\":\"struct IMedicalAccess.AccessRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"getActivePermissions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"dataFields\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct IMedicalAccess.AccessPermission[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDoctors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPharmacists\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"}],\"name\":\"getDoctor\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"licenseHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"specialization\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct IMedicalAccess.DoctorProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDoctorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"getPatientCID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pharmacistAddress\",\"type\":\"address\"}],\"name\":\"getPharmacist\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"pharmacyId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pharmacyName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"internalType\":\"struct IMedicalAccess.PharmacistProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPharmacistCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"dataFields\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"grantTemporaryAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isVerifiedPharmacist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"patientRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"licenseHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"licenseExpiry\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"specialization\",\"type\":\"string\"}],\"name\":\"registerDoctor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerPatient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pharmacistAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"pharmacyId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pharmacyName\",\"type\":\"string\"}],\"name\":\"registerPharmacist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"doctorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hospital\",\"type\":\"string\"}],\"name\":\"requestAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"revokeAccessEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"}],\"name\":\"revokeDoctor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pharmacistAddress\",\"type\":\"address\"}],\"name\":\"revokePharmacist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"storeDataCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationHours\",\"type\":\"uint256\"}],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/access/MedicalAccess.sol\":\"MedicalAccess\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/access/MedicalAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../interfaces/IMedicalAccess.sol\\\";\\nimport \\\"../libraries/PermissionsLib.sol\\\";\\nimport \\\"../libraries/RegistryLib.sol\\\";\\n\\ncontract MedicalAccess is AccessControl, IMedicalAccess {\\n    using PermissionsLib for PermissionsLib.AccessPermissionStorage;\\n    using RegistryLib for RegistryLib.DoctorRegistry;\\n    using RegistryLib for RegistryLib.PharmacistRegistry;\\n\\n    // Constants\\n    bytes32 public constant override DOCTOR_ROLE = keccak256(\\\"DOCTOR_ROLE\\\");\\n    bytes32 public constant override ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant override PHARMACIST_ROLE =\\n        keccak256(\\\"PHARMACIST_ROLE\\\");\\n    bytes32 public constant override PATIENT_ROLE = keccak256(\\\"PATIENT_ROLE\\\");\\n\\n    // Storage\\n    PermissionsLib.AccessPermissionStorage private permissions;\\n    RegistryLib.DoctorRegistry private doctors;\\n    RegistryLib.PharmacistRegistry private pharmacists;\\n\\n    mapping(address => bool) public patientRegistry;\\n    mapping(address => string) private patientDataCIDs;\\n    mapping(address => AccessRequest[]) private accessRequests;\\n    mapping(address => mapping(address => bytes)) private accessKeys;\\n\\n    bool public override emergencyPause;\\n    uint256 public pauseExpiry;\\n\\n    constructor() {\\n        _grantRole(ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(DOCTOR_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(PHARMACIST_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(PATIENT_ROLE, ADMIN_ROLE);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an Admin\\\");\\n        _;\\n    }\\n\\n    modifier notPaused() {\\n        if (emergencyPause && block.timestamp >= pauseExpiry) {\\n            emergencyPause = false;\\n        }\\n        require(!emergencyPause, \\\"Contract paused\\\");\\n        _;\\n    }\\n\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) public view override(AccessControl, IMedicalAccess) returns (bool) {\\n        return super.hasRole(role, account);\\n    }\\n\\n    function registerDoctor(\\n        address doctorAddress,\\n        string memory licenseHash,\\n        uint256 licenseExpiry,\\n        string memory name,\\n        string memory specialization\\n    ) external override onlyAdmin notPaused {\\n        require(licenseExpiry > block.timestamp, \\\"License Expired\\\");\\n        require(bytes(licenseHash).length > 0, \\\"Invalid License\\\");\\n        require(doctorAddress != address(0), \\\"Invalid Address\\\");\\n        require(bytes(name).length > 0, \\\"Name required\\\");\\n        require(bytes(specialization).length > 0, \\\"Specialization required\\\");\\n        require(\\n            !doctors.doctorRegistry[doctorAddress].isActive,\\n            \\\"Doctor already registered\\\"\\n        );\\n\\n        _grantRole(DOCTOR_ROLE, doctorAddress);\\n        doctors.registerDoctor(\\n            doctorAddress,\\n            licenseHash,\\n            licenseExpiry,\\n            name,\\n            specialization\\n        );\\n        emit DoctorRegistered(doctorAddress, licenseHash, licenseExpiry);\\n    }\\n\\n    function revokeDoctor(\\n        address doctorAddress\\n    ) external override onlyAdmin notPaused {\\n        doctors.revokeDoctor(doctorAddress);\\n        _revokeRole(DOCTOR_ROLE, doctorAddress);\\n        emit DoctorRevoked(doctorAddress);\\n    }\\n\\n    function registerPharmacist(\\n        address pharmacistAddress,\\n        string memory pharmacyId,\\n        string memory pharmacyName\\n    ) external override onlyAdmin notPaused {\\n        require(pharmacistAddress != address(0), \\\"Invalid Address\\\");\\n        require(\\n            !pharmacists.pharmacistRegistry[pharmacistAddress].isVerified,\\n            \\\"Pharmacist already Registered\\\"\\n        );\\n\\n        _grantRole(PHARMACIST_ROLE, pharmacistAddress);\\n        pharmacists.registerPharmacist(\\n            pharmacistAddress,\\n            pharmacyId,\\n            pharmacyName\\n        );\\n        emit PharmacistRegistered(pharmacistAddress, pharmacyId);\\n    }\\n\\n    function revokePharmacist(\\n        address pharmacistAddress\\n    ) external override onlyAdmin {\\n        pharmacists.revokePharmacist(pharmacistAddress);\\n        _revokeRole(PHARMACIST_ROLE, pharmacistAddress);\\n        emit PharmacistRevoked(pharmacistAddress);\\n    }\\n\\n    function registerPatient() external override notPaused {\\n        require(!patientRegistry[msg.sender], \\\"Patient already registered\\\");\\n        _grantRole(PATIENT_ROLE, msg.sender);\\n        patientRegistry[msg.sender] = true;\\n        emit PatientRegistered(msg.sender);\\n    }\\n\\n    function grantTemporaryAccess(\\n        address doctor,\\n        string[] calldata dataFields,\\n        uint256 duration\\n    ) external override onlyRole(PATIENT_ROLE) {\\n        require(hasRole(DOCTOR_ROLE, doctor), \\\"Not a valid doctor\\\");\\n        require(duration > 0, \\\"Duration must be positive\\\");\\n\\n        uint256 requestId = permissions.grantTemporaryAccess(\\n            doctor,\\n            msg.sender,\\n            dataFields,\\n            duration\\n        );\\n        emit TemporaryAccessGranted(\\n            requestId,\\n            doctor,\\n            msg.sender,\\n            block.timestamp + duration,\\n            dataFields\\n        );\\n    }\\n\\n    function extendAccess(\\n        uint256 requestId,\\n        uint256 additionalDuration\\n    ) external override {\\n        permissions.extendAccess(msg.sender, requestId, additionalDuration);\\n        emit AccessExtended(requestId, block.timestamp + additionalDuration);\\n    }\\n\\n    function revokeAccessEarly(uint256 requestId) external override {\\n        permissions.revokeAccessEarly(msg.sender, requestId);\\n        emit AccessRevokedEarly(requestId);\\n    }\\n\\n    function requestAccess(\\n        address patient,\\n        string memory doctorName,\\n        string memory hospital\\n    ) external override onlyRole(DOCTOR_ROLE) {\\n        uint256 requestId = permissions.nextRequestId;\\n        accessRequests[patient].push(\\n            AccessRequest({\\n                id: requestId,\\n                doctor: msg.sender,\\n                patient: patient,\\n                doctorName: doctorName,\\n                hospital: hospital,\\n                timestamp: block.timestamp,\\n                fulfilled: false\\n            })\\n        );\\n        permissions.nextRequestId++;\\n        emit AccessRequested(requestId, msg.sender, patient);\\n    }\\n\\n    function approveAccess(\\n        uint256 requestId,\\n        bytes memory encryptedKey\\n    ) external override {\\n        AccessRequest[] storage requests = accessRequests[msg.sender];\\n        for (uint i = 0; i < requests.length; i++) {\\n            if (requests[i].id == requestId) {\\n                requests[i].fulfilled = true;\\n                accessKeys[msg.sender][requests[i].doctor] = encryptedKey;\\n                emit AccessApproved(requestId, requests[i].doctor, msg.sender);\\n                return;\\n            }\\n        }\\n        revert(\\\"Request not found\\\");\\n    }\\n\\n    function revokeAccess(address doctor) external override {\\n        // Revoke all permissions for this doctor\\n        IMedicalAccess.AccessPermission[] storage patientPerms = permissions\\n            .patientPermissions[msg.sender];\\n        for (uint i = 0; i < patientPerms.length; i++) {\\n            if (patientPerms[i].doctor == doctor && patientPerms[i].isActive) {\\n                patientPerms[i].isActive = false;\\n                emit AccessRevokedEarly(patientPerms[i].requestId);\\n            }\\n        }\\n\\n        delete accessKeys[msg.sender][doctor];\\n        emit AccessRevoked(doctor, msg.sender);\\n    }\\n\\n    function storeDataCID(\\n        string calldata cid\\n    ) external override onlyRole(PATIENT_ROLE) {\\n        patientDataCIDs[msg.sender] = cid;\\n        emit DataStored(msg.sender, cid);\\n    }\\n\\n    function togglePause(uint256 durationHours) external override onlyAdmin {\\n        emergencyPause = !emergencyPause;\\n        pauseExpiry = emergencyPause\\n            ? block.timestamp + (durationHours * 1 hours)\\n            : 0;\\n        emit PauseToggled(emergencyPause);\\n    }\\n\\n    // View functions\\n    function isActive(\\n        address doctorAddress\\n    ) external view override returns (bool) {\\n        IMedicalAccess.DoctorProfile memory doc = doctors.doctorRegistry[\\n            doctorAddress\\n        ];\\n        return\\n            hasRole(DOCTOR_ROLE, doctorAddress) &&\\n            doc.isActive &&\\n            doc.expiryDate > block.timestamp;\\n    }\\n\\n    function isVerifiedPharmacist(\\n        address account\\n    ) public view override returns (bool) {\\n        return\\n            hasRole(PHARMACIST_ROLE, account) &&\\n            pharmacists.pharmacistRegistry[account].isVerified;\\n    }\\n\\n    function getDoctor(\\n        address doctorAddress\\n    ) external view override returns (DoctorProfile memory) {\\n        return doctors.getDoctor(doctorAddress);\\n    }\\n\\n    function getPharmacist(\\n        address pharmacistAddress\\n    ) external view override returns (PharmacistProfile memory) {\\n        return pharmacists.getPharmacist(pharmacistAddress);\\n    }\\n\\n    function getAllDoctors() external view override returns (address[] memory) {\\n        return doctors.getAllDoctors();\\n    }\\n\\n    function getAllPharmacists()\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return pharmacists.getAllPharmacists();\\n    }\\n\\n    function getDoctorCount() external view override returns (uint256) {\\n        return doctors.getDoctorCount();\\n    }\\n\\n    function getPharmacistCount() external view override returns (uint256) {\\n        return pharmacists.getPharmacistCount();\\n    }\\n\\n    function getActivePermissions(\\n        address patient\\n    ) external view override returns (AccessPermission[] memory) {\\n        return permissions.getActivePermissions(patient);\\n    }\\n\\n    function getPatientCID(\\n        address patient\\n    ) external view override returns (string memory) {\\n        require(\\n            msg.sender == patient ||\\n                hasRole(ADMIN_ROLE, msg.sender) ||\\n                hasRole(DOCTOR_ROLE, msg.sender),\\n            \\\"No access\\\"\\n        );\\n        return patientDataCIDs[patient];\\n    }\\n\\n    function getAccessRequests(\\n        address patient\\n    ) external view override returns (AccessRequest[] memory) {\\n        return accessRequests[patient];\\n    }\\n\\n    function revokeRole(\\n        bytes32 role,\\n        address account\\n    ) public override onlyRole(getRoleAdmin(role)) {\\n        super.revokeRole(role, account);\\n        emit RoleRevokedWithSender(role, account);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(AccessControl) returns (bool) {\\n        return\\n            interfaceId == type(IMedicalAccess).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xdee4b90f4abd13b8f778646c628746e4ac77341d96748214692728afeb93bbb9\",\"license\":\"MIT\"},\"contracts/interfaces/IMedicalAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\ninterface IMedicalAccess {\\n    struct AccessPermission {\\n        uint256 requestId;\\n        address doctor;\\n        address patient;\\n        uint256 expiryTime;\\n        string[] dataFields; // e.g., [\\\"name\\\", \\\"dob\\\", \\\"allergies\\\"]\\n        bool isActive;\\n    }\\n\\n    // Struct Definitions\\n    struct DoctorProfile {\\n        string licenseHash;\\n        uint256 expiryDate;\\n        string name;\\n        string specialization;\\n        bool isActive;\\n    }\\n\\n    struct PharmacistProfile {\\n        string pharmacyId;\\n        string pharmacyName;\\n        bool isVerified;\\n    }\\n\\n    // Events\\n    event DoctorRegistered(\\n        address indexed doctor,\\n        string licenseHash,\\n        uint256 expiry\\n    );\\n\\n    struct AccessRequest {\\n        uint256 id;\\n        address doctor;\\n        address patient;\\n        string doctorName;\\n        string hospital;\\n        uint256 timestamp;\\n        bool fulfilled;\\n    }\\n\\n    event DoctorUpdated(address indexed doctor);\\n    event DoctorRevoked(address indexed doctor);\\n    event PharmacistRegistered(address indexed pharmacist, string pharmacyId);\\n    event PharmacistRevoked(address indexed pharmacist);\\n    event PatientRegistered(address indexed account);\\n    event PauseToggled(bool isPaused);\\n    event RoleRevokedWithSender(bytes32 indexed role, address indexed account);\\n    event DataStored(address indexed patient, string cid);\\n    event AccessRequested(\\n        uint256 indexed requestId,\\n        address indexed doctor,\\n        address indexed patient\\n    );\\n    event AccessApproved(\\n        uint256 indexed requestId,\\n        address indexed doctor,\\n        address indexed patient\\n    );\\n    event AccessRevoked(address indexed doctor, address indexed patient);\\n    event TemporaryAccessGranted(\\n        uint256 indexed requestId,\\n        address indexed doctor,\\n        address indexed patient,\\n        uint256 expiryTime,\\n        string[] dataFields\\n    );\\n    event AccessExtended(uint256 indexed requestId, uint256 newExpiry);\\n    event AccessRevokedEarly(uint256 indexed requestId);\\n\\n    // Role Constants\\n    function DOCTOR_ROLE() external pure returns (bytes32);\\n\\n    function PHARMACIST_ROLE() external pure returns (bytes32);\\n\\n    function ADMIN_ROLE() external pure returns (bytes32);\\n\\n    function PATIENT_ROLE() external view returns (bytes32);\\n\\n    // Role Verification\\n    function isActive(address doctorAddress) external view returns (bool);\\n\\n    function isVerifiedPharmacist(\\n        address pharmacistAddress\\n    ) external view returns (bool);\\n\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool);\\n\\n    function requestAccess(\\n        address patient,\\n        string memory doctorName,\\n        string memory hospital\\n    ) external;\\n\\n    function approveAccess(\\n        uint256 requestId,\\n        bytes memory encryptedKey\\n    ) external;\\n\\n    function revokeAccess(address doctor) external;\\n\\n    function storeDataCID(string calldata cid) external;\\n\\n    function grantTemporaryAccess(\\n        address doctor,\\n        string[] calldata dataFields,\\n        uint256 duration\\n    ) external;\\n\\n    function extendAccess(\\n        uint256 requestId,\\n        uint256 additionalDuration\\n    ) external;\\n\\n    function revokeAccessEarly(uint256 requestId) external;\\n\\n    // Getters\\n    function getDoctor(\\n        address doctorAddress\\n    ) external view returns (DoctorProfile memory);\\n\\n    function getPharmacist(\\n        address pharmacistAddress\\n    ) external view returns (PharmacistProfile memory);\\n\\n    function getAllDoctors() external view returns (address[] memory);\\n\\n    function getAllPharmacists() external view returns (address[] memory);\\n\\n    function getDoctorCount() external view returns (uint256);\\n\\n    function getPharmacistCount() external view returns (uint256);\\n\\n    function getActivePermissions(\\n        address patient\\n    ) external view returns (AccessPermission[] memory);\\n\\n    // Registration Functions\\n    function registerDoctor(\\n        address doctorAddress,\\n        string memory licenseHash,\\n        uint256 licenseExpiry,\\n        string memory name,\\n        string memory specialization\\n    ) external;\\n\\n    function revokeDoctor(address doctorAddress) external;\\n\\n    function registerPharmacist(\\n        address pharmacistAddress,\\n        string memory pharmacyId,\\n        string memory pharmacyName\\n    ) external;\\n\\n    function revokePharmacist(address pharmacistAddress) external;\\n\\n    function registerPatient() external;\\n\\n    // function renewDoctorLicense(\\n    //     address doctorAddress,\\n    //     uint256 newExpiry\\n    // ) external;\\n\\n    // System Controls\\n    function togglePause(uint256 durationHours) external;\\n\\n    function getPatientCID(\\n        address patient\\n    ) external view returns (string memory);\\n\\n    function getAccessRequests(\\n        address patient\\n    ) external view returns (AccessRequest[] memory);\\n\\n    function emergencyPause() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7ff7826caebbde1b1679db947280a596c462ac2b89a57e7dbc268ae5ed0d2e54\",\"license\":\"MIT\"},\"contracts/libraries/PermissionsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport \\\"../interfaces/IMedicalAccess.sol\\\";\\n\\nlibrary PermissionsLib {\\n    struct AccessPermissionStorage {\\n        mapping(address => IMedicalAccess.AccessPermission[]) patientPermissions;\\n        uint256 nextRequestId;\\n    }\\n\\n    function grantTemporaryAccess(\\n        AccessPermissionStorage storage self,\\n        address doctor,\\n        address patient,\\n        string[] calldata dataFields,\\n        uint256 duration\\n    ) external returns (uint256 requestId) {\\n        requestId = self.nextRequestId++;\\n        uint256 expiryTime = block.timestamp + duration;\\n\\n        self.patientPermissions[patient].push(\\n            IMedicalAccess.AccessPermission({\\n                requestId: requestId,\\n                doctor: doctor,\\n                patient: patient,\\n                expiryTime: expiryTime,\\n                dataFields: dataFields,\\n                isActive: true\\n            })\\n        );\\n    }\\n\\n    function extendAccess(\\n        AccessPermissionStorage storage self,\\n        address patient,\\n        uint256 requestId,\\n        uint256 additionalDuration\\n    ) external {\\n        IMedicalAccess.AccessPermission[] storage permissions = self\\n            .patientPermissions[patient];\\n        for (uint i = 0; i < permissions.length; i++) {\\n            if (permissions[i].requestId == requestId) {\\n                require(permissions[i].isActive, \\\"Permission not active\\\");\\n                permissions[i].expiryTime += additionalDuration;\\n                return;\\n            }\\n        }\\n        revert(\\\"Permission not found\\\");\\n    }\\n\\n    function revokeAccessEarly(\\n        AccessPermissionStorage storage self,\\n        address patient,\\n        uint256 requestId\\n    ) external {\\n        IMedicalAccess.AccessPermission[] storage permissions = self\\n            .patientPermissions[patient];\\n        for (uint i = 0; i < permissions.length; i++) {\\n            if (permissions[i].requestId == requestId) {\\n                require(permissions[i].isActive, \\\"Permission not active\\\");\\n                permissions[i].isActive = false;\\n                return;\\n            }\\n        }\\n        revert(\\\"Permission not found\\\");\\n    }\\n\\n    function getActivePermissions(\\n        AccessPermissionStorage storage self,\\n        address patient\\n    ) external view returns (IMedicalAccess.AccessPermission[] memory) {\\n        IMedicalAccess.AccessPermission[] storage all = self.patientPermissions[\\n            patient\\n        ];\\n        uint256 activeCount = 0;\\n\\n        for (uint i = 0; i < all.length; i++) {\\n            if (all[i].isActive && all[i].expiryTime > block.timestamp) {\\n                activeCount++;\\n            }\\n        }\\n\\n        IMedicalAccess.AccessPermission[]\\n            memory result = new IMedicalAccess.AccessPermission[](activeCount);\\n        uint256 index = 0;\\n\\n        for (uint i = 0; i < all.length; i++) {\\n            if (all[i].isActive && all[i].expiryTime > block.timestamp) {\\n                result[index] = all[i];\\n                index++;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xcdeaa30b7333d5c7ec0c5f75f8fbcabcc339ceea957424de42bf1766de34f595\",\"license\":\"MIT\"},\"contracts/libraries/RegistryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport \\\"../interfaces/IMedicalAccess.sol\\\";\\n\\nlibrary RegistryLib {\\n    struct DoctorRegistry {\\n        mapping(address => IMedicalAccess.DoctorProfile) doctorRegistry;\\n        mapping(address => uint256) doctorIndex;\\n        address[] doctorList;\\n    }\\n\\n    struct PharmacistRegistry {\\n        mapping(address => IMedicalAccess.PharmacistProfile) pharmacistRegistry;\\n        mapping(address => uint256) pharmacistIndex;\\n        address[] pharmacistList;\\n    }\\n\\n    function registerDoctor(\\n        DoctorRegistry storage self,\\n        address doctorAddress,\\n        string memory licenseHash,\\n        uint256 licenseExpiry,\\n        string memory name,\\n        string memory specialization\\n    ) external {\\n        self.doctorRegistry[doctorAddress] = IMedicalAccess.DoctorProfile({\\n            licenseHash: licenseHash,\\n            expiryDate: licenseExpiry,\\n            name: name,\\n            specialization: specialization,\\n            isActive: true\\n        });\\n        self.doctorList.push(doctorAddress);\\n        self.doctorIndex[doctorAddress] = self.doctorList.length;\\n    }\\n\\n    function revokeDoctor(\\n        DoctorRegistry storage self,\\n        address doctorAddress\\n    ) external {\\n        uint256 index = self.doctorIndex[doctorAddress];\\n        require(index > 0, \\\"Not an active doctor\\\");\\n        require(\\n            self.doctorRegistry[doctorAddress].isActive,\\n            \\\"Not an active doctor\\\"\\n        );\\n\\n        self.doctorList[index - 1] = self.doctorList[\\n            self.doctorList.length - 1\\n        ];\\n        self.doctorIndex[self.doctorList[index - 1]] = index;\\n        self.doctorList.pop();\\n        self.doctorIndex[doctorAddress] = 0;\\n\\n        self.doctorRegistry[doctorAddress].isActive = false;\\n    }\\n\\n    function registerPharmacist(\\n        PharmacistRegistry storage self,\\n        address pharmacistAddress,\\n        string memory pharmacyId,\\n        string memory pharmacyName\\n    ) external {\\n        self.pharmacistRegistry[pharmacistAddress] = IMedicalAccess\\n            .PharmacistProfile({\\n                pharmacyId: pharmacyId,\\n                pharmacyName: pharmacyName,\\n                isVerified: true\\n            });\\n        self.pharmacistList.push(pharmacistAddress);\\n        self.pharmacistIndex[pharmacistAddress] = self.pharmacistList.length;\\n    }\\n\\n    function revokePharmacist(\\n        PharmacistRegistry storage self,\\n        address pharmacistAddress\\n    ) external {\\n        uint256 index = self.pharmacistIndex[pharmacistAddress];\\n        require(index > 0, \\\"Pharmacist not registered\\\");\\n        require(\\n            self.pharmacistRegistry[pharmacistAddress].isVerified,\\n            \\\"Pharmacist not verified\\\"\\n        );\\n\\n        self.pharmacistList[index - 1] = self.pharmacistList[\\n            self.pharmacistList.length - 1\\n        ];\\n        self.pharmacistIndex[self.pharmacistList[index - 1]] = index;\\n        self.pharmacistList.pop();\\n        self.pharmacistIndex[pharmacistAddress] = 0;\\n    }\\n\\n    function getDoctor(\\n        DoctorRegistry storage self,\\n        address doctorAddress\\n    ) external view returns (IMedicalAccess.DoctorProfile memory) {\\n        return self.doctorRegistry[doctorAddress];\\n    }\\n\\n    function getPharmacist(\\n        PharmacistRegistry storage self,\\n        address pharmacistAddress\\n    ) external view returns (IMedicalAccess.PharmacistProfile memory) {\\n        return self.pharmacistRegistry[pharmacistAddress];\\n    }\\n\\n    function getAllDoctors(\\n        DoctorRegistry storage self\\n    ) external view returns (address[] memory) {\\n        return self.doctorList;\\n    }\\n\\n    function getAllPharmacists(\\n        PharmacistRegistry storage self\\n    ) external view returns (address[] memory) {\\n        return self.pharmacistList;\\n    }\\n\\n    function getDoctorCount(\\n        DoctorRegistry storage self\\n    ) external view returns (uint256) {\\n        return self.doctorList.length;\\n    }\\n\\n    function getPharmacistCount(\\n        PharmacistRegistry storage self\\n    ) external view returns (uint256) {\\n        return self.pharmacistList.length;\\n    }\\n}\\n\",\"keccak256\":\"0x49c98d203daab24432cfd2952e82a1d7fa088d02e79ee2bcfd60f87e4f7dcea6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c806385e6853111610130578063a7e29814116100b8578063d1eb16521161007c578063d1eb1652146106ab578063d547741f146106c9578063f0d95090146106e5578063f125af6b14610703578063fec331f21461072157610232565b8063a7e2981414610607578063ac5cb97d14610623578063b803a2e314610641578063c532d9fa1461065d578063cf3743341461067b57610232565b80639f8a13d7116100ff5780639f8a13d714610551578063a1a7236214610581578063a217fddf1461059d578063a6af1606146105bb578063a784176b146105d757610232565b806385e68531146104b757806391d14854146104d35780639c80cfa3146105035780639db92d681461053357610232565b8063405fa249116101be5780636bd9110e116101825780636bd9110e1461041157806375b238fc1461044157806379111c1c1461045f578063822d38851461047d57806384efc52f1461048757610232565b8063405fa2491461036f578063437435701461038b57806351858e27146103a757806356f25d27146103c5578063689d7c74146103f557610232565b80632f04e064116102055780632f04e064146102cf5780632f2ff15d146102ff57806336568abe1461031b57806339c59de9146103375780633b0c0f0f1461035357610232565b806301ffc9a7146102375780630416af2714610267578063088be8c314610283578063248a9ca31461029f575b600080fd5b610251600480360381019061024c919061320a565b61073f565b60405161025e9190613252565b60405180910390f35b610281600480360381019061027c91906132cb565b6107b9565b005b61029d6004803603810190610298919061343e565b61098e565b005b6102b960048036038101906102b491906134ff565b610c76565b6040516102c6919061353b565b60405180910390f35b6102e960048036038101906102e491906132cb565b610c95565b6040516102f69190613681565b60405180910390f35b610319600480360381019061031491906136a3565b610d26565b005b610335600480360381019061033091906136a3565b610d48565b005b610351600480360381019061034c91906132cb565b610dc3565b005b61036d6004803603810190610368919061370f565b610f09565b005b6103896004803603810190610384919061383e565b611307565b005b6103a560048036038101906103a0919061388b565b6113d5565b005b6103af6114ec565b6040516103bc9190613252565b60405180910390f35b6103df60048036038101906103da91906132cb565b6114ff565b6040516103ec9190613252565b60405180910390f35b61040f600480360381019061040a91906138b8565b61158d565b005b61042b600480360381019061042691906132cb565b611644565b6040516104389190613942565b60405180910390f35b6104496117e5565b604051610456919061353b565b60405180910390f35b610467611809565b6040516104749190613973565b60405180910390f35b61048561188b565b005b6104a1600480360381019061049c91906132cb565b611a6f565b6040516104ae91906139e5565b60405180910390f35b6104d160048036038101906104cc91906132cb565b611b00565b005b6104ed60048036038101906104e891906136a3565b611d8a565b6040516104fa9190613252565b60405180910390f35b61051d600480360381019061051891906132cb565b611d9e565b60405161052a9190613252565b60405180910390f35b61053b611dbe565b6040516105489190613ac5565b60405180910390f35b61056b600480360381019061056691906132cb565b611e45565b6040516105789190613252565b60405180910390f35b61059b60048036038101906105969190613b88565b6120c0565b005b6105a561233b565b6040516105b2919061353b565b60405180910390f35b6105d560048036038101906105d09190613c3a565b612342565b005b6105f160048036038101906105ec91906132cb565b61251e565b6040516105fe9190613ebb565b60405180910390f35b610621600480360381019061061c919061343e565b6125a9565b005b61062b612812565b604051610638919061353b565b60405180910390f35b61065b6004803603810190610656919061388b565b612836565b005b6106656128d4565b604051610672919061353b565b60405180910390f35b610695600480360381019061069091906132cb565b6128f8565b6040516106a29190614042565b60405180910390f35b6106b3612b95565b6040516106c09190613973565b60405180910390f35b6106e360048036038101906106de91906136a3565b612c17565b005b6106ed612c7c565b6040516106fa9190613ac5565b60405180910390f35b61070b612d03565b6040516107189190613973565b60405180910390f35b610729612d09565b604051610736919061353b565b60405180910390f35b60007ffce87ace000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107b257506107b182612d2d565b5b9050919050565b6107e37fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8a565b610822576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610819906140b0565b60405180910390fd5b600d60009054906101000a900460ff1680156108405750600e544210155b15610861576000600d60006101000a81548160ff0219169083151502179055505b600d60009054906101000a900460ff16156108b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a89061411c565b60405180910390fd5b600373__$f25c482e92a731d9ed43127d815f1df244$__6355c473879091836040518363ffffffff1660e01b81526004016108ed929190614152565b60006040518083038186803b15801561090557600080fd5b505af4158015610919573d6000803e3d6000fd5b505050506109477f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f82612da7565b508073ffffffffffffffffffffffffffffffffffffffff167fc7053e532de062d754b8ed96090affe0c4ba36dde0a699de7dd5185a9a9e7d0f60405160405180910390a250565b6109b87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8a565b6109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ee906140b0565b60405180910390fd5b600d60009054906101000a900460ff168015610a155750600e544210155b15610a36576000600d60006101000a81548160ff0219169083151502179055505b600d60009054906101000a900460ff1615610a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7d9061411c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aec906141c7565b60405180910390fd5b600660000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615610b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7f90614233565b60405180910390fd5b610bb27fc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de6884612e99565b50600673__$f25c482e92a731d9ed43127d815f1df244$__635da0371090918585856040518563ffffffff1660e01b8152600401610bf394939291906142a4565b60006040518083038186803b158015610c0b57600080fd5b505af4158015610c1f573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167ff780bede1449966edddb53884c0ea6892f688b86aa75813f703f4ee50ec16e5b83604051610c699190613942565b60405180910390a2505050565b6000806000838152602001908152602001600020600101549050919050565b610c9d6130ed565b600373__$f25c482e92a731d9ed43127d815f1df244$__6349a839a79091846040518363ffffffff1660e01b8152600401610cd9929190614152565b600060405180830381865af4158015610cf6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d1f9190614492565b9050919050565b610d2f82610c76565b610d3881612f8a565b610d428383612e99565b50505050565b610d50612f9e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610db4576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610dbe8282612da7565b505050565b610ded7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8a565b610e2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e23906140b0565b60405180910390fd5b600673__$f25c482e92a731d9ed43127d815f1df244$__63e075debc9091836040518363ffffffff1660e01b8152600401610e689291906144db565b60006040518083038186803b158015610e8057600080fd5b505af4158015610e94573d6000803e3d6000fd5b50505050610ec27fc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de6882612da7565b508073ffffffffffffffffffffffffffffffffffffffff167f3d35d2ee499267c27c37466f419f5d2fb4f9d71671ba366201725410649035d360405160405180910390a250565b610f337fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8a565b610f72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f69906140b0565b60405180910390fd5b600d60009054906101000a900460ff168015610f905750600e544210155b15610fb1576000600d60006101000a81548160ff0219169083151502179055505b600d60009054906101000a900460ff1615611001576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff89061411c565b60405180910390fd5b428311611043576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103a90614550565b60405180910390fd5b6000845111611087576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107e906145bc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036110f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ed906141c7565b60405180910390fd5b600082511161113a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113190614628565b60405180910390fd5b600081511161117e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117590614694565b60405180910390fd5b600360000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1615611211576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120890614700565b60405180910390fd5b61123b7f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f86612e99565b50600373__$f25c482e92a731d9ed43127d815f1df244$__638e7cc4bc909187878787876040518763ffffffff1660e01b81526004016112809695949392919061472f565b60006040518083038186803b15801561129857600080fd5b505af41580156112ac573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f1f5e33d2573da99a901bca6b2c06d5f12b75dfd179bcbbe46a5216cf8349ee6b85856040516112f89291906147a5565b60405180910390a25050505050565b7f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed61133181612f8a565b8282600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020918261137f9291906149ec565b503373ffffffffffffffffffffffffffffffffffffffff167f4b33dafb50dac5530c30aca4e4069fd67a18220888b874b8519558d1769d49a184846040516113c8929190614ae9565b60405180910390a2505050565b6113ff7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8a565b61143e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611435906140b0565b60405180910390fd5b600d60009054906101000a900460ff1615600d60006101000a81548160ff021916908315150217905550600d60009054906101000a900460ff1661148357600061149d565b610e10816114919190614b3c565b4261149c9190614b7e565b5b600e819055507f9077d36bc00859b5c3f320310707208543dd35092cb0a0fe117d0c6a558b148b600d60009054906101000a900460ff166040516114e19190613252565b60405180910390a150565b600d60009054906101000a900460ff1681565b600061152b7fc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de6883611d8a565b80156115865750600660000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff165b9050919050565b600173__$fa020a500783576cb949474ac6940fd299$__63d5f0828190913385856040518563ffffffff1660e01b81526004016115cd9493929190614bb9565b60006040518083038186803b1580156115e557600080fd5b505af41580156115f9573d6000803e3d6000fd5b50505050817fe32aab36a0db5d8c977134f45af8266890345c66229dd59f9ecdf663668d4731824261162b9190614b7e565b6040516116389190613973565b60405180910390a25050565b60608173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806116a657506116a57fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8a565b5b806116d757506116d67f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f33611d8a565b5b611716576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170d90614c4a565b60405180910390fd5b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546117609061480f565b80601f016020809104026020016040519081016040528092919081815260200182805461178c9061480f565b80156117d95780601f106117ae576101008083540402835291602001916117d9565b820191906000526020600020905b8154815290600101906020018083116117bc57829003601f168201915b50505050509050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6000600373__$f25c482e92a731d9ed43127d815f1df244$__63c5f5d36f90916040518263ffffffff1660e01b81526004016118459190614c6a565b602060405180830381865af4158015611862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118869190614c85565b905090565b600d60009054906101000a900460ff1680156118a95750600e544210155b156118ca576000600d60006101000a81548160ff0219169083151502179055505b600d60009054906101000a900460ff161561191a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119119061411c565b60405180910390fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156119a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199e90614cfe565b60405180910390fd5b6119d17f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed33612e99565b506001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fc9fa2003fca4ce0dfc8cb0deae32266b715536df6685365b05b5be96ede8e49c60405160405180910390a2565b611a7761311e565b600673__$f25c482e92a731d9ed43127d815f1df244$__6326dd7c369091846040518363ffffffff1660e01b8152600401611ab39291906144db565b600060405180830381865af4158015611ad0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611af99190614dba565b9050919050565b6000600160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b8180549050811015611ca3578273ffffffffffffffffffffffffffffffffffffffff16828281548110611b7f57611b7e614e03565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015611c025750818181548110611be257611be1614e03565b5b906000526020600020906006020160050160009054906101000a900460ff165b15611c96576000828281548110611c1c57611c1b614e03565b5b906000526020600020906006020160050160006101000a81548160ff021916908315150217905550818181548110611c5757611c56614e03565b5b9060005260206000209060060201600001547f91ff4d16576040b78e69b4d9da7512a6b24c63472eb50154802f3e3f4ed5500e60405160405180910390a25b8080600101915050611b49565b50600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611d2c9190613141565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f825c8be24eb0df19500f63e86c29e7d0d951e73056b889b891d85e40938d9b6e60405160405180910390a35050565b6000611d968383612fa6565b905092915050565b60096020528060005260406000206000915054906101000a900460ff1681565b6060600673__$f25c482e92a731d9ed43127d815f1df244$__638f77b68d90916040518263ffffffff1660e01b8152600401611dfa9190614e32565b600060405180830381865af4158015611e17573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e409190614f25565b905090565b600080600360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082018054611ea59061480f565b80601f0160208091040260200160405190810160405280929190818152602001828054611ed19061480f565b8015611f1e5780601f10611ef357610100808354040283529160200191611f1e565b820191906000526020600020905b815481529060010190602001808311611f0157829003601f168201915b5050505050815260200160018201548152602001600282018054611f419061480f565b80601f0160208091040260200160405190810160405280929190818152602001828054611f6d9061480f565b8015611fba5780601f10611f8f57610100808354040283529160200191611fba565b820191906000526020600020905b815481529060010190602001808311611f9d57829003601f168201915b50505050508152602001600382018054611fd39061480f565b80601f0160208091040260200160405190810160405280929190818152602001828054611fff9061480f565b801561204c5780601f106120215761010080835404028352916020019161204c565b820191906000526020600020905b81548152906001019060200180831161202f57829003601f168201915b505050505081526020016004820160009054906101000a900460ff161515151581525050905061209c7f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f84611d8a565b80156120a9575080608001515b80156120b85750428160200151115b915050919050565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b81805490508110156122fb578382828154811061212657612125614e03565b5b906000526020600020906007020160000154036122ee57600182828154811061215257612151614e03565b5b906000526020600020906007020160060160006101000a81548160ff02191690831515021790555082600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008484815481106121cf576121ce614e03565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090816122479190614fd4565b503373ffffffffffffffffffffffffffffffffffffffff1682828154811061227257612271614e03565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16857f734eac5b54039ed4ed359c7034f5c743cbea175340fc22ca139f102119991ce960405160405180910390a45050612337565b8080600101915050612106565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232e906150f2565b60405180910390fd5b5050565b6000801b81565b7f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed61236c81612f8a565b6123967f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f86611d8a565b6123d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123cc9061515e565b60405180910390fd5b60008211612418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240f906151ca565b60405180910390fd5b6000600173__$fa020a500783576cb949474ac6940fd299$__634f6601e0909188338989896040518763ffffffff1660e01b815260040161245e9695949392919061534e565b602060405180830381865af415801561247b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249f9190614c85565b90503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16827fefe5b72062702550465fdc2e5b73521c231f083cba1fd798d285715f9f483d6e86426124fd9190614b7e565b898960405161250e93929190615474565b60405180910390a4505050505050565b6060600173__$fa020a500783576cb949474ac6940fd299$__63de9d94b89091846040518363ffffffff1660e01b815260040161255c9291906154a6565b600060405180830381865af4158015612579573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906125a2919061574d565b9050919050565b7f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f6125d381612f8a565b600060018001549050600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020014281526020016000151581525090806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030190816127539190615796565b5060808201518160040190816127699190615796565b5060a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555050506001800160008154809291906127ab90615868565b91905055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16827fc0d9df9d6d8acee28356fcc24c0de4597104943515c4c0b12fb3d6b1ca74b0ee60405160405180910390a45050505050565b7f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed81565b600173__$fa020a500783576cb949474ac6940fd299$__63cbca4aec909133846040518463ffffffff1660e01b8152600401612874939291906158b0565b60006040518083038186803b15801561288c57600080fd5b505af41580156128a0573d6000803e3d6000fd5b50505050807f91ff4d16576040b78e69b4d9da7512a6b24c63472eb50154802f3e3f4ed5500e60405160405180910390a250565b7fc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de6881565b6060600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015612b8a57838290600052602060002090600702016040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054612a429061480f565b80601f0160208091040260200160405190810160405280929190818152602001828054612a6e9061480f565b8015612abb5780601f10612a9057610100808354040283529160200191612abb565b820191906000526020600020905b815481529060010190602001808311612a9e57829003601f168201915b50505050508152602001600482018054612ad49061480f565b80601f0160208091040260200160405190810160405280929190818152602001828054612b009061480f565b8015612b4d5780601f10612b2257610100808354040283529160200191612b4d565b820191906000526020600020905b815481529060010190602001808311612b3057829003601f168201915b50505050508152602001600582015481526020016006820160009054906101000a900460ff16151515158152505081526020019060010190612959565b505050509050919050565b6000600673__$f25c482e92a731d9ed43127d815f1df244$__63f3208c1e90916040518263ffffffff1660e01b8152600401612bd19190614e32565b602060405180830381865af4158015612bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c129190614c85565b905090565b612c2082610c76565b612c2981612f8a565b612c338383613010565b8173ffffffffffffffffffffffffffffffffffffffff16837fcfb95b05744d1dc2a42dc08bf4bd2ed68f381aeac3c9b1a6250a6120e236ba8860405160405180910390a3505050565b6060600373__$f25c482e92a731d9ed43127d815f1df244$",
  "libraries": {
    "PermissionsLib": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "RegistryLib": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  },
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 493,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "permissions",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AccessPermissionStorage)1782_storage"
      },
      {
        "astId": 496,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "doctors",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(DoctorRegistry)2090_storage"
      },
      {
        "astId": 499,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "pharmacists",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(PharmacistRegistry)2103_storage"
      },
      {
        "astId": 503,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "patientRegistry",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 507,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "patientDataCIDs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 513,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "accessRequests",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_struct(AccessRequest)1487_storage)dyn_storage)"
      },
      {
        "astId": 519,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "accessKeys",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bytes_storage))"
      },
      {
        "astId": 522,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "emergencyPause",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 524,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "pauseExpiry",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AccessPermission)1446_storage)dyn_storage": {
        "base": "t_struct(AccessPermission)1446_storage",
        "encoding": "dynamic_array",
        "label": "struct IMedicalAccess.AccessPermission[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AccessRequest)1487_storage)dyn_storage": {
        "base": "t_struct(AccessRequest)1487_storage",
        "encoding": "dynamic_array",
        "label": "struct IMedicalAccess.AccessRequest[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(AccessPermission)1446_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMedicalAccess.AccessPermission[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(AccessPermission)1446_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(AccessRequest)1487_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMedicalAccess.AccessRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(AccessRequest)1487_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bytes_storage)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(DoctorProfile)1457_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMedicalAccess.DoctorProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(DoctorProfile)1457_storage"
      },
      "t_mapping(t_address,t_struct(PharmacistProfile)1464_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMedicalAccess.PharmacistProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(PharmacistProfile)1464_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AccessPermission)1446_storage": {
        "encoding": "inplace",
        "label": "struct IMedicalAccess.AccessPermission",
        "members": [
          {
            "astId": 1434,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "requestId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1436,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "doctor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1438,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "patient",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1440,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "expiryTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1443,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "dataFields",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 1445,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "isActive",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(AccessPermissionStorage)1782_storage": {
        "encoding": "inplace",
        "label": "struct PermissionsLib.AccessPermissionStorage",
        "members": [
          {
            "astId": 1779,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "patientPermissions",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_array(t_struct(AccessPermission)1446_storage)dyn_storage)"
          },
          {
            "astId": 1781,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "nextRequestId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AccessRequest)1487_storage": {
        "encoding": "inplace",
        "label": "struct IMedicalAccess.AccessRequest",
        "members": [
          {
            "astId": 1474,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1476,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "doctor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1478,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "patient",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1480,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "doctorName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1482,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "hospital",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1484,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1486,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "fulfilled",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(DoctorProfile)1457_storage": {
        "encoding": "inplace",
        "label": "struct IMedicalAccess.DoctorProfile",
        "members": [
          {
            "astId": 1448,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "licenseHash",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1450,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "expiryDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1452,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1454,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "specialization",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1456,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "isActive",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(DoctorRegistry)2090_storage": {
        "encoding": "inplace",
        "label": "struct RegistryLib.DoctorRegistry",
        "members": [
          {
            "astId": 2082,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "doctorRegistry",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(DoctorProfile)1457_storage)"
          },
          {
            "astId": 2086,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "doctorIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2089,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "doctorList",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PharmacistProfile)1464_storage": {
        "encoding": "inplace",
        "label": "struct IMedicalAccess.PharmacistProfile",
        "members": [
          {
            "astId": 1459,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "pharmacyId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1461,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "pharmacyName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1463,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "isVerified",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PharmacistRegistry)2103_storage": {
        "encoding": "inplace",
        "label": "struct RegistryLib.PharmacistRegistry",
        "members": [
          {
            "astId": 2095,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "pharmacistRegistry",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(PharmacistProfile)1464_storage)"
          },
          {
            "astId": 2099,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "pharmacistIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2102,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "pharmacistList",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}