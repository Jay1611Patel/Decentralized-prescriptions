{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "AccessApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExpiry",
          "type": "uint256"
        }
      ],
      "name": "AccessExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "AccessRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "AccessRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "AccessRevokedEarly",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "cid",
          "type": "string"
        }
      ],
      "name": "DataStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "licenseHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "DoctorRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        }
      ],
      "name": "DoctorRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        }
      ],
      "name": "DoctorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PatientRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "name": "PauseToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pharmacist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "pharmacyId",
          "type": "string"
        }
      ],
      "name": "PharmacistRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pharmacist",
          "type": "address"
        }
      ],
      "name": "PharmacistRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleRevokedWithSender",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "dataFields",
          "type": "string[]"
        }
      ],
      "name": "TemporaryAccessGranted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOCTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PATIENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PHARMACIST_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "encryptedKey",
          "type": "bytes"
        }
      ],
      "name": "approveAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "additionalDuration",
          "type": "uint256"
        }
      ],
      "name": "extendAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "getAccessRequests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "doctor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "patient",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "doctorName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "hospital",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "fulfilled",
              "type": "bool"
            }
          ],
          "internalType": "struct IMedicalAccess.AccessRequest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllDoctors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPharmacists",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        }
      ],
      "name": "getDoctor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "licenseHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "expiryDate",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "specialization",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct IMedicalAccess.DoctorProfile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDoctorAccess",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "requestId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "doctor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "patient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiryTime",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "dataFields",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct IMedicalAccess.AccessPermission[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDoctorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "getPatientCID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPatientPermissions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "requestId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "doctor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "patient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiryTime",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "dataFields",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct IMedicalAccess.AccessPermission[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pharmacistAddress",
          "type": "address"
        }
      ],
      "name": "getPharmacist",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "pharmacyId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "pharmacyName",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isVerified",
              "type": "bool"
            }
          ],
          "internalType": "struct IMedicalAccess.PharmacistProfile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPharmacistCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "dataFields",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "grantTemporaryAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isVerifiedPharmacist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "patientRegistry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "licenseHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "licenseExpiry",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "specialization",
          "type": "string"
        }
      ],
      "name": "registerDoctor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerPatient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pharmacistAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "pharmacyId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "pharmacyName",
          "type": "string"
        }
      ],
      "name": "registerPharmacist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "patient",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "doctorName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hospital",
          "type": "string"
        }
      ],
      "name": "requestAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        }
      ],
      "name": "revokeAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        }
      ],
      "name": "revokeAccessEarly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        }
      ],
      "name": "revokeDoctor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pharmacistAddress",
          "type": "address"
        }
      ],
      "name": "revokePharmacist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        }
      ],
      "name": "storeDataCID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "durationHours",
          "type": "uint256"
        }
      ],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbbfa955bb316a4067a574657020313f5c420e3c7f57b9da9deee56eab97682e7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "5241102",
    "logsBloom": "0x
    "blockHash": "0xfa26c8fc66367ab95ffed592aea028bff1538fb429b3f4aaeb29de46ce65610a",
    "transactionHash": "0xbbfa955bb316a4067a574657020313f5c420e3c7f57b9da9deee56eab97682e7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xbbfa955bb316a4067a574657020313f5c420e3c7f57b9da9deee56eab97682e7",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfa26c8fc66367ab95ffed592aea028bff1538fb429b3f4aaeb29de46ce65610a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xbbfa955bb316a4067a574657020313f5c420e3c7f57b9da9deee56eab97682e7",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xfa26c8fc66367ab95ffed592aea028bff1538fb429b3f4aaeb29de46ce65610a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xbbfa955bb316a4067a574657020313f5c420e3c7f57b9da9deee56eab97682e7",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de68",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xfa26c8fc66367ab95ffed592aea028bff1538fb429b3f4aaeb29de46ce65610a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xbbfa955bb316a4067a574657020313f5c420e3c7f57b9da9deee56eab97682e7",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xfa26c8fc66367ab95ffed592aea028bff1538fb429b3f4aaeb29de46ce65610a"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "5241102",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "59ae38f1cb551820bd93d3d8a232d5e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"AccessApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpiry\",\"type\":\"uint256\"}],\"name\":\"AccessExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"AccessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"AccessRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"AccessRevokedEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"DataStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"licenseHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"DoctorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"}],\"name\":\"DoctorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"}],\"name\":\"DoctorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PatientRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pharmacist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pharmacyId\",\"type\":\"string\"}],\"name\":\"PharmacistRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pharmacist\",\"type\":\"address\"}],\"name\":\"PharmacistRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevokedWithSender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"dataFields\",\"type\":\"string[]\"}],\"name\":\"TemporaryAccessGranted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOCTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PATIENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PHARMACIST_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"}],\"name\":\"approveAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"additionalDuration\",\"type\":\"uint256\"}],\"name\":\"extendAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"getAccessRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"doctorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hospital\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"internalType\":\"struct IMedicalAccess.AccessRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDoctors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPharmacists\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"}],\"name\":\"getDoctor\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"licenseHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"specialization\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct IMedicalAccess.DoctorProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDoctorAccess\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"dataFields\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct IMedicalAccess.AccessPermission[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDoctorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"getPatientCID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPatientPermissions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"dataFields\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct IMedicalAccess.AccessPermission[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pharmacistAddress\",\"type\":\"address\"}],\"name\":\"getPharmacist\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"pharmacyId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pharmacyName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"internalType\":\"struct IMedicalAccess.PharmacistProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPharmacistCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"dataFields\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"grantTemporaryAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isVerifiedPharmacist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"patientRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"licenseHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"licenseExpiry\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"specialization\",\"type\":\"string\"}],\"name\":\"registerDoctor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerPatient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pharmacistAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"pharmacyId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pharmacyName\",\"type\":\"string\"}],\"name\":\"registerPharmacist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"doctorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hospital\",\"type\":\"string\"}],\"name\":\"requestAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"}],\"name\":\"revokeAccessEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"}],\"name\":\"revokeDoctor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pharmacistAddress\",\"type\":\"address\"}],\"name\":\"revokePharmacist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"storeDataCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationHours\",\"type\":\"uint256\"}],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/access/MedicalAccess.sol\":\"MedicalAccess\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/access/MedicalAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../interfaces/IMedicalAccess.sol\\\";\\nimport \\\"../libraries/PermissionsLib.sol\\\";\\nimport \\\"../libraries/RegistryLib.sol\\\";\\n\\ncontract MedicalAccess is AccessControl, IMedicalAccess {\\n    using PermissionsLib for PermissionsLib.AccessPermissionStorage;\\n    using RegistryLib for RegistryLib.DoctorRegistry;\\n    using RegistryLib for RegistryLib.PharmacistRegistry;\\n\\n    // Constants\\n    bytes32 public constant override DOCTOR_ROLE = keccak256(\\\"DOCTOR_ROLE\\\");\\n    bytes32 public constant override ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant override PHARMACIST_ROLE =\\n        keccak256(\\\"PHARMACIST_ROLE\\\");\\n    bytes32 public constant override PATIENT_ROLE = keccak256(\\\"PATIENT_ROLE\\\");\\n\\n    // Storage\\n    PermissionsLib.AccessPermissionStorage private permissions;\\n    RegistryLib.DoctorRegistry private doctors;\\n    RegistryLib.PharmacistRegistry private pharmacists;\\n\\n    mapping(address => bool) public patientRegistry;\\n    mapping(address => string) private patientDataCIDs;\\n    mapping(address => AccessRequest[]) private accessRequests;\\n    mapping(address => mapping(address => bytes)) private accessKeys;\\n\\n    bool public override emergencyPause;\\n    uint256 public pauseExpiry;\\n\\n    constructor() {\\n        _grantRole(ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(DOCTOR_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(PHARMACIST_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(PATIENT_ROLE, ADMIN_ROLE);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an Admin\\\");\\n        _;\\n    }\\n\\n    modifier notPaused() {\\n        if (emergencyPause && block.timestamp >= pauseExpiry) {\\n            emergencyPause = false;\\n        }\\n        require(!emergencyPause, \\\"Contract paused\\\");\\n        _;\\n    }\\n\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) public view override(AccessControl, IMedicalAccess) returns (bool) {\\n        return super.hasRole(role, account);\\n    }\\n\\n    function registerDoctor(\\n        address doctorAddress,\\n        string memory licenseHash,\\n        uint256 licenseExpiry,\\n        string memory name,\\n        string memory specialization\\n    ) external override onlyAdmin notPaused {\\n        require(licenseExpiry > block.timestamp, \\\"License Expired\\\");\\n        require(bytes(licenseHash).length > 0, \\\"Invalid License\\\");\\n        require(doctorAddress != address(0), \\\"Invalid Address\\\");\\n        require(bytes(name).length > 0, \\\"Name required\\\");\\n        require(bytes(specialization).length > 0, \\\"Specialization required\\\");\\n        require(\\n            !doctors.doctorRegistry[doctorAddress].isActive,\\n            \\\"Doctor already registered\\\"\\n        );\\n\\n        _grantRole(DOCTOR_ROLE, doctorAddress);\\n        doctors.registerDoctor(\\n            doctorAddress,\\n            licenseHash,\\n            licenseExpiry,\\n            name,\\n            specialization\\n        );\\n        emit DoctorRegistered(doctorAddress, licenseHash, licenseExpiry);\\n    }\\n\\n    function revokeDoctor(\\n        address doctorAddress\\n    ) external override onlyAdmin notPaused {\\n        doctors.revokeDoctor(doctorAddress);\\n        _revokeRole(DOCTOR_ROLE, doctorAddress);\\n        emit DoctorRevoked(doctorAddress);\\n    }\\n\\n    function registerPharmacist(\\n        address pharmacistAddress,\\n        string memory pharmacyId,\\n        string memory pharmacyName\\n    ) external override onlyAdmin notPaused {\\n        require(pharmacistAddress != address(0), \\\"Invalid Address\\\");\\n        require(\\n            !pharmacists.pharmacistRegistry[pharmacistAddress].isVerified,\\n            \\\"Pharmacist already Registered\\\"\\n        );\\n\\n        _grantRole(PHARMACIST_ROLE, pharmacistAddress);\\n        pharmacists.registerPharmacist(\\n            pharmacistAddress,\\n            pharmacyId,\\n            pharmacyName\\n        );\\n        emit PharmacistRegistered(pharmacistAddress, pharmacyId);\\n    }\\n\\n    function revokePharmacist(\\n        address pharmacistAddress\\n    ) external override onlyAdmin {\\n        pharmacists.revokePharmacist(pharmacistAddress);\\n        _revokeRole(PHARMACIST_ROLE, pharmacistAddress);\\n        emit PharmacistRevoked(pharmacistAddress);\\n    }\\n\\n    function registerPatient() external override notPaused {\\n        require(!patientRegistry[msg.sender], \\\"Patient already registered\\\");\\n        _grantRole(PATIENT_ROLE, msg.sender);\\n        patientRegistry[msg.sender] = true;\\n        emit PatientRegistered(msg.sender);\\n    }\\n\\n    function grantTemporaryAccess(\\n        address doctor,\\n        string[] calldata dataFields,\\n        uint256 duration\\n    ) external override onlyRole(PATIENT_ROLE) {\\n        require(hasRole(DOCTOR_ROLE, doctor), \\\"Not a valid doctor\\\");\\n        require(duration > 0, \\\"Duration must be positive\\\");\\n\\n        uint256 requestId = permissions.grantTemporaryAccess(\\n            doctor,\\n            msg.sender,\\n            dataFields,\\n            duration\\n        );\\n        emit TemporaryAccessGranted(\\n            requestId,\\n            doctor,\\n            msg.sender,\\n            block.timestamp + duration,\\n            dataFields\\n        );\\n    }\\n\\n    function extendAccess(\\n        uint256 requestId,\\n        address doctor,\\n        uint256 additionalDuration\\n    ) external override {\\n        permissions.extendAccess(\\n            doctor,\\n            msg.sender,\\n            requestId,\\n            additionalDuration\\n        );\\n        emit AccessExtended(requestId, block.timestamp + additionalDuration);\\n    }\\n\\n    function revokeAccessEarly(\\n        uint256 requestId,\\n        address doctor\\n    ) external override {\\n        permissions.revokeAccessEarly(doctor, msg.sender, requestId);\\n        emit AccessRevokedEarly(requestId);\\n    }\\n\\n    function requestAccess(\\n        address patient,\\n        string memory doctorName,\\n        string memory hospital\\n    ) external override onlyRole(DOCTOR_ROLE) {\\n        uint256 requestId = permissions.nextRequestId;\\n        accessRequests[patient].push(\\n            AccessRequest({\\n                id: requestId,\\n                doctor: msg.sender,\\n                patient: patient,\\n                doctorName: doctorName,\\n                hospital: hospital,\\n                timestamp: block.timestamp,\\n                fulfilled: false\\n            })\\n        );\\n        permissions.nextRequestId++;\\n        emit AccessRequested(requestId, msg.sender, patient);\\n    }\\n\\n    function approveAccess(\\n        uint256 requestId,\\n        bytes memory encryptedKey\\n    ) external override {\\n        AccessRequest[] storage requests = accessRequests[msg.sender];\\n        for (uint i = 0; i < requests.length; i++) {\\n            if (requests[i].id == requestId) {\\n                requests[i].fulfilled = true;\\n                accessKeys[msg.sender][requests[i].doctor] = encryptedKey;\\n                emit AccessApproved(requestId, requests[i].doctor, msg.sender);\\n                return;\\n            }\\n        }\\n        revert(\\\"Request not found\\\");\\n    }\\n\\n    function revokeAccess(address doctor) external override {\\n        // Revoke all permissions for this doctor\\n        IMedicalAccess.AccessPermission[] storage patientPerms = permissions\\n            .patientPermissions[msg.sender];\\n        for (uint i = 0; i < patientPerms.length; i++) {\\n            if (patientPerms[i].doctor == doctor && patientPerms[i].isActive) {\\n                patientPerms[i].isActive = false;\\n                emit AccessRevokedEarly(patientPerms[i].requestId);\\n            }\\n        }\\n\\n        delete accessKeys[msg.sender][doctor];\\n        emit AccessRevoked(doctor, msg.sender);\\n    }\\n\\n    function storeDataCID(\\n        string calldata cid\\n    ) external override onlyRole(PATIENT_ROLE) {\\n        patientDataCIDs[msg.sender] = cid;\\n        emit DataStored(msg.sender, cid);\\n    }\\n\\n    function togglePause(uint256 durationHours) external override onlyAdmin {\\n        emergencyPause = !emergencyPause;\\n        pauseExpiry = emergencyPause\\n            ? block.timestamp + (durationHours * 1 hours)\\n            : 0;\\n        emit PauseToggled(emergencyPause);\\n    }\\n\\n    // View functions\\n    function isActive(\\n        address doctorAddress\\n    ) external view override returns (bool) {\\n        IMedicalAccess.DoctorProfile memory doc = doctors.doctorRegistry[\\n            doctorAddress\\n        ];\\n        return\\n            hasRole(DOCTOR_ROLE, doctorAddress) &&\\n            doc.isActive &&\\n            doc.expiryDate > block.timestamp;\\n    }\\n\\n    function isVerifiedPharmacist(\\n        address account\\n    ) public view override returns (bool) {\\n        return\\n            hasRole(PHARMACIST_ROLE, account) &&\\n            pharmacists.pharmacistRegistry[account].isVerified;\\n    }\\n\\n    function getDoctor(\\n        address doctorAddress\\n    ) external view override returns (DoctorProfile memory) {\\n        return doctors.getDoctor(doctorAddress);\\n    }\\n\\n    function getPharmacist(\\n        address pharmacistAddress\\n    ) external view override returns (PharmacistProfile memory) {\\n        return pharmacists.getPharmacist(pharmacistAddress);\\n    }\\n\\n    function getAllDoctors() external view override returns (address[] memory) {\\n        return doctors.getAllDoctors();\\n    }\\n\\n    function getAllPharmacists()\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return pharmacists.getAllPharmacists();\\n    }\\n\\n    function getDoctorCount() external view override returns (uint256) {\\n        return doctors.getDoctorCount();\\n    }\\n\\n    function getPharmacistCount() external view override returns (uint256) {\\n        return pharmacists.getPharmacistCount();\\n    }\\n\\n    function getDoctorAccess()\\n        external\\n        view\\n        override\\n        returns (AccessPermission[] memory)\\n    {\\n        require(hasRole(DOCTOR_ROLE, msg.sender), \\\"Caller is not a doctor\\\");\\n        return permissions.getDoctorAccess(msg.sender);\\n    }\\n\\n    function getPatientPermissions()\\n        external\\n        view\\n        override\\n        returns (AccessPermission[] memory)\\n    {\\n        require(hasRole(PATIENT_ROLE, msg.sender), \\\"Caller is not a patient\\\");\\n        return permissions.getPatientPermissions(msg.sender);\\n    }\\n\\n    function getPatientCID(\\n        address patient\\n    ) external view override returns (string memory) {\\n        require(\\n            msg.sender == patient ||\\n                hasRole(ADMIN_ROLE, msg.sender) ||\\n                hasRole(DOCTOR_ROLE, msg.sender),\\n            \\\"No access\\\"\\n        );\\n        return patientDataCIDs[patient];\\n    }\\n\\n    function getAccessRequests(\\n        address patient\\n    ) external view override returns (AccessRequest[] memory) {\\n        return accessRequests[patient];\\n    }\\n\\n    function revokeRole(\\n        bytes32 role,\\n        address account\\n    ) public override onlyRole(getRoleAdmin(role)) {\\n        super.revokeRole(role, account);\\n        emit RoleRevokedWithSender(role, account);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(AccessControl) returns (bool) {\\n        return\\n            interfaceId == type(IMedicalAccess).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x214793691cd84c2b51f37367b8a1917c94831e01cba003f665291db3685dcdd0\",\"license\":\"MIT\"},\"contracts/interfaces/IMedicalAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\ninterface IMedicalAccess {\\n    struct AccessPermission {\\n        uint256 requestId;\\n        address doctor;\\n        address patient;\\n        uint256 expiryTime;\\n        string[] dataFields; // e.g., [\\\"name\\\", \\\"dob\\\", \\\"allergies\\\"]\\n        bool isActive;\\n    }\\n\\n    // Struct Definitions\\n    struct DoctorProfile {\\n        string licenseHash;\\n        uint256 expiryDate;\\n        string name;\\n        string specialization;\\n        bool isActive;\\n    }\\n\\n    struct PharmacistProfile {\\n        string pharmacyId;\\n        string pharmacyName;\\n        bool isVerified;\\n    }\\n\\n    // Events\\n    event DoctorRegistered(\\n        address indexed doctor,\\n        string licenseHash,\\n        uint256 expiry\\n    );\\n\\n    struct AccessRequest {\\n        uint256 id;\\n        address doctor;\\n        address patient;\\n        string doctorName;\\n        string hospital;\\n        uint256 timestamp;\\n        bool fulfilled;\\n    }\\n\\n    event DoctorUpdated(address indexed doctor);\\n    event DoctorRevoked(address indexed doctor);\\n    event PharmacistRegistered(address indexed pharmacist, string pharmacyId);\\n    event PharmacistRevoked(address indexed pharmacist);\\n    event PatientRegistered(address indexed account);\\n    event PauseToggled(bool isPaused);\\n    event RoleRevokedWithSender(bytes32 indexed role, address indexed account);\\n    event DataStored(address indexed patient, string cid);\\n    event AccessRequested(\\n        uint256 indexed requestId,\\n        address indexed doctor,\\n        address indexed patient\\n    );\\n    event AccessApproved(\\n        uint256 indexed requestId,\\n        address indexed doctor,\\n        address indexed patient\\n    );\\n    event AccessRevoked(address indexed doctor, address indexed patient);\\n    event TemporaryAccessGranted(\\n        uint256 indexed requestId,\\n        address indexed doctor,\\n        address indexed patient,\\n        uint256 expiryTime,\\n        string[] dataFields\\n    );\\n    event AccessExtended(uint256 indexed requestId, uint256 newExpiry);\\n    event AccessRevokedEarly(uint256 indexed requestId);\\n\\n    // Role Constants\\n    function DOCTOR_ROLE() external pure returns (bytes32);\\n\\n    function PHARMACIST_ROLE() external pure returns (bytes32);\\n\\n    function ADMIN_ROLE() external pure returns (bytes32);\\n\\n    function PATIENT_ROLE() external view returns (bytes32);\\n\\n    // Role Verification\\n    function isActive(address doctorAddress) external view returns (bool);\\n\\n    function isVerifiedPharmacist(\\n        address pharmacistAddress\\n    ) external view returns (bool);\\n\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool);\\n\\n    function requestAccess(\\n        address patient,\\n        string memory doctorName,\\n        string memory hospital\\n    ) external;\\n\\n    function approveAccess(\\n        uint256 requestId,\\n        bytes memory encryptedKey\\n    ) external;\\n\\n    function revokeAccess(address doctor) external;\\n\\n    function storeDataCID(string calldata cid) external;\\n\\n    function grantTemporaryAccess(\\n        address doctor,\\n        string[] calldata dataFields,\\n        uint256 duration\\n    ) external;\\n\\n    function extendAccess(\\n        uint256 requestId,\\n        address doctor,\\n        uint256 additionalDuration\\n    ) external;\\n\\n    function revokeAccessEarly(uint256 requestId, address doctor) external;\\n\\n    // Getters\\n    function getDoctor(\\n        address doctorAddress\\n    ) external view returns (DoctorProfile memory);\\n\\n    function getPharmacist(\\n        address pharmacistAddress\\n    ) external view returns (PharmacistProfile memory);\\n\\n    function getAllDoctors() external view returns (address[] memory);\\n\\n    function getAllPharmacists() external view returns (address[] memory);\\n\\n    function getDoctorCount() external view returns (uint256);\\n\\n    function getPharmacistCount() external view returns (uint256);\\n\\n    function getPatientPermissions()\\n        external\\n        view\\n        returns (AccessPermission[] memory);\\n\\n    function getDoctorAccess()\\n        external\\n        view\\n        returns (AccessPermission[] memory);\\n\\n    // Registration Functions\\n    function registerDoctor(\\n        address doctorAddress,\\n        string memory licenseHash,\\n        uint256 licenseExpiry,\\n        string memory name,\\n        string memory specialization\\n    ) external;\\n\\n    function revokeDoctor(address doctorAddress) external;\\n\\n    function registerPharmacist(\\n        address pharmacistAddress,\\n        string memory pharmacyId,\\n        string memory pharmacyName\\n    ) external;\\n\\n    function revokePharmacist(address pharmacistAddress) external;\\n\\n    function registerPatient() external;\\n\\n    // function renewDoctorLicense(\\n    //     address doctorAddress,\\n    //     uint256 newExpiry\\n    // ) external;\\n\\n    // System Controls\\n    function togglePause(uint256 durationHours) external;\\n\\n    function getPatientCID(\\n        address patient\\n    ) external view returns (string memory);\\n\\n    function getAccessRequests(\\n        address patient\\n    ) external view returns (AccessRequest[] memory);\\n\\n    function emergencyPause() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc70c3983299fe91f7704c26469e5d9f11c89f154d8322dee6782fe4ab7dcb6b1\",\"license\":\"MIT\"},\"contracts/libraries/PermissionsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport \\\"../interfaces/IMedicalAccess.sol\\\";\\n\\nlibrary PermissionsLib {\\n    struct AccessPermissionStorage {\\n        mapping(address => IMedicalAccess.AccessPermission[]) patientPermissions;\\n        mapping(address => IMedicalAccess.AccessPermission[]) doctorPermissions;\\n        uint256 nextRequestId;\\n    }\\n\\n    function grantTemporaryAccess(\\n        AccessPermissionStorage storage self,\\n        address doctor,\\n        address patient,\\n        string[] calldata dataFields,\\n        uint256 duration\\n    ) external returns (uint256 requestId) {\\n        requestId = self.nextRequestId++;\\n        uint256 expiryTime = block.timestamp + duration;\\n\\n        IMedicalAccess.AccessPermission memory permission = IMedicalAccess\\n            .AccessPermission({\\n                requestId: requestId,\\n                doctor: doctor,\\n                patient: patient,\\n                expiryTime: expiryTime,\\n                dataFields: dataFields,\\n                isActive: true\\n            });\\n        self.doctorPermissions[doctor].push(permission);\\n        self.patientPermissions[patient].push(permission);\\n    }\\n\\n    function extendAccess(\\n        AccessPermissionStorage storage self,\\n        address doctor,\\n        address patient,\\n        uint256 requestId,\\n        uint256 additionalDuration\\n    ) external {\\n        bool found;\\n        IMedicalAccess.AccessPermission[] storage doctorPerms = self\\n            .doctorPermissions[doctor];\\n        for (uint i = 0; i < doctorPerms.length; i++) {\\n            if (\\n                doctorPerms[i].requestId == requestId &&\\n                doctorPerms[i].patient == patient\\n            ) {\\n                require(doctorPerms[i].isActive, \\\"Permission not active\\\");\\n                doctorPerms[i].expiryTime += additionalDuration;\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        IMedicalAccess.AccessPermission[] storage patientPerms = self\\n            .patientPermissions[patient];\\n        for (uint i = 0; i < patientPerms.length; i++) {\\n            if (\\n                patientPerms[i].requestId == requestId &&\\n                patientPerms[i].doctor == doctor\\n            ) {\\n                require(patientPerms[i].isActive, \\\"Permission not active\\\");\\n                patientPerms[i].expiryTime += additionalDuration;\\n                break;\\n            }\\n        }\\n\\n        if (!found) revert(\\\"Permission not found\\\");\\n    }\\n\\n    function revokeAccessEarly(\\n        AccessPermissionStorage storage self,\\n        address doctor,\\n        address patient,\\n        uint256 requestId\\n    ) external {\\n        bool found;\\n\\n        // Doctor's permissions\\n        IMedicalAccess.AccessPermission[] storage doctorPerms = self\\n            .doctorPermissions[doctor];\\n        for (uint i = 0; i < doctorPerms.length; i++) {\\n            if (\\n                doctorPerms[i].requestId == requestId &&\\n                doctorPerms[i].patient == patient\\n            ) {\\n                require(doctorPerms[i].isActive, \\\"Permission not active\\\");\\n                doctorPerms[i].isActive = false;\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        // Patient's permissions\\n        IMedicalAccess.AccessPermission[] storage patientPerms = self\\n            .patientPermissions[patient];\\n        for (uint i = 0; i < patientPerms.length; i++) {\\n            if (\\n                patientPerms[i].requestId == requestId &&\\n                patientPerms[i].doctor == doctor\\n            ) {\\n                require(patientPerms[i].isActive, \\\"Permission not active\\\");\\n                patientPerms[i].isActive = false;\\n                break;\\n            }\\n        }\\n\\n        if (!found) revert(\\\"Permission not found\\\");\\n    }\\n\\n    function getDoctorAccess(\\n        AccessPermissionStorage storage self,\\n        address doctor\\n    ) external view returns (IMedicalAccess.AccessPermission[] memory) {\\n        IMedicalAccess.AccessPermission[] storage all = self.doctorPermissions[\\n            doctor\\n        ];\\n        uint256 activeCount = 0;\\n\\n        for (uint i = 0; i < all.length; i++) {\\n            if (all[i].isActive && all[i].expiryTime > block.timestamp) {\\n                activeCount++;\\n            }\\n        }\\n\\n        IMedicalAccess.AccessPermission[]\\n            memory result = new IMedicalAccess.AccessPermission[](activeCount);\\n        uint256 index = 0;\\n\\n        for (uint i = 0; i < all.length; i++) {\\n            if (all[i].isActive && all[i].expiryTime > block.timestamp) {\\n                result[index] = all[i];\\n                index++;\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function getPatientPermissions(\\n        AccessPermissionStorage storage self,\\n        address patient\\n    ) external view returns (IMedicalAccess.AccessPermission[] memory) {\\n        IMedicalAccess.AccessPermission[] storage all = self.patientPermissions[\\n            patient\\n        ];\\n        uint256 activeCount = 0;\\n\\n        for (uint i = 0; i < all.length; i++) {\\n            if (all[i].isActive && all[i].expiryTime > block.timestamp) {\\n                activeCount++;\\n            }\\n        }\\n\\n        IMedicalAccess.AccessPermission[]\\n            memory result = new IMedicalAccess.AccessPermission[](activeCount);\\n        uint256 index = 0;\\n\\n        for (uint i = 0; i < all.length; i++) {\\n            if (all[i].isActive && all[i].expiryTime > block.timestamp) {\\n                result[index] = all[i];\\n                index++;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x758ec1541ad0b0ab209c5882968efd16c8bb1275a7057646c98e841b92a24d36\",\"license\":\"MIT\"},\"contracts/libraries/RegistryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport \\\"../interfaces/IMedicalAccess.sol\\\";\\n\\nlibrary RegistryLib {\\n    struct DoctorRegistry {\\n        mapping(address => IMedicalAccess.DoctorProfile) doctorRegistry;\\n        mapping(address => uint256) doctorIndex;\\n        address[] doctorList;\\n    }\\n\\n    struct PharmacistRegistry {\\n        mapping(address => IMedicalAccess.PharmacistProfile) pharmacistRegistry;\\n        mapping(address => uint256) pharmacistIndex;\\n        address[] pharmacistList;\\n    }\\n\\n    function registerDoctor(\\n        DoctorRegistry storage self,\\n        address doctorAddress,\\n        string memory licenseHash,\\n        uint256 licenseExpiry,\\n        string memory name,\\n        string memory specialization\\n    ) external {\\n        self.doctorRegistry[doctorAddress] = IMedicalAccess.DoctorProfile({\\n            licenseHash: licenseHash,\\n            expiryDate: licenseExpiry,\\n            name: name,\\n            specialization: specialization,\\n            isActive: true\\n        });\\n        self.doctorList.push(doctorAddress);\\n        self.doctorIndex[doctorAddress] = self.doctorList.length;\\n    }\\n\\n    function revokeDoctor(\\n        DoctorRegistry storage self,\\n        address doctorAddress\\n    ) external {\\n        uint256 index = self.doctorIndex[doctorAddress];\\n        require(index > 0, \\\"Not an active doctor\\\");\\n        require(\\n            self.doctorRegistry[doctorAddress].isActive,\\n            \\\"Not an active doctor\\\"\\n        );\\n\\n        self.doctorList[index - 1] = self.doctorList[\\n            self.doctorList.length - 1\\n        ];\\n        self.doctorIndex[self.doctorList[index - 1]] = index;\\n        self.doctorList.pop();\\n        self.doctorIndex[doctorAddress] = 0;\\n\\n        self.doctorRegistry[doctorAddress].isActive = false;\\n    }\\n\\n    function registerPharmacist(\\n        PharmacistRegistry storage self,\\n        address pharmacistAddress,\\n        string memory pharmacyId,\\n        string memory pharmacyName\\n    ) external {\\n        self.pharmacistRegistry[pharmacistAddress] = IMedicalAccess\\n            .PharmacistProfile({\\n                pharmacyId: pharmacyId,\\n                pharmacyName: pharmacyName,\\n                isVerified: true\\n            });\\n        self.pharmacistList.push(pharmacistAddress);\\n        self.pharmacistIndex[pharmacistAddress] = self.pharmacistList.length;\\n    }\\n\\n    function revokePharmacist(\\n        PharmacistRegistry storage self,\\n        address pharmacistAddress\\n    ) external {\\n        uint256 index = self.pharmacistIndex[pharmacistAddress];\\n        require(index > 0, \\\"Pharmacist not registered\\\");\\n        require(\\n            self.pharmacistRegistry[pharmacistAddress].isVerified,\\n            \\\"Pharmacist not verified\\\"\\n        );\\n\\n        self.pharmacistList[index - 1] = self.pharmacistList[\\n            self.pharmacistList.length - 1\\n        ];\\n        self.pharmacistIndex[self.pharmacistList[index - 1]] = index;\\n        self.pharmacistList.pop();\\n        self.pharmacistIndex[pharmacistAddress] = 0;\\n    }\\n\\n    function getDoctor(\\n        DoctorRegistry storage self,\\n        address doctorAddress\\n    ) external view returns (IMedicalAccess.DoctorProfile memory) {\\n        return self.doctorRegistry[doctorAddress];\\n    }\\n\\n    function getPharmacist(\\n        PharmacistRegistry storage self,\\n        address pharmacistAddress\\n    ) external view returns (IMedicalAccess.PharmacistProfile memory) {\\n        return self.pharmacistRegistry[pharmacistAddress];\\n    }\\n\\n    function getAllDoctors(\\n        DoctorRegistry storage self\\n    ) external view returns (address[] memory) {\\n        return self.doctorList;\\n    }\\n\\n    function getAllPharmacists(\\n        PharmacistRegistry storage self\\n    ) external view returns (address[] memory) {\\n        return self.pharmacistList;\\n    }\\n\\n    function getDoctorCount(\\n        DoctorRegistry storage self\\n    ) external view returns (uint256) {\\n        return self.doctorList.length;\\n    }\\n\\n    function getPharmacistCount(\\n        PharmacistRegistry storage self\\n    ) external view returns (uint256) {\\n        return self.pharmacistList.length;\\n    }\\n}\\n\",\"keccak256\":\"0x49c98d203daab24432cfd2952e82a1d7fa088d02e79ee2bcfd60f87e4f7dcea6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506100417fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217753361013760201b60201c565b506100927f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561023460201b60201c565b6100e27fc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de687fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561023460201b60201c565b6101327f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561023460201b60201c565b610340565b6000610149838361029560201b60201c565b61022957600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506101c66102af60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001905061022e565b600090505b92915050565b6000610245836102b760201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b60006102a783836102d660201b60201c565b905092915050565b600033905090565b6000806000838152602001908152602001600020600101549050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b615c148061034f6000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c806385e685311161013b578063ac5cb97d116100b8578063d1eb16521161007c578063d1eb1652146106c2578063d547741f146106e0578063f0d95090146106fc578063f125af6b1461071a578063fec331f2146107385761023d565b8063ac5cb97d1461061c578063b9b3d29b1461063a578063be762dcc14610658578063c532d9fa14610674578063cf374334146106925761023d565b80639f8a13d7116100ff5780639f8a13d71461057a578063a1a72362146105aa578063a217fddf146105c6578063a6af1606146105e4578063a7e29814146106005761023d565b806385e68531146104c257806391d14854146104de5780639c3871141461050e5780639c80cfa31461052c5780639db92d681461055c5761023d565b80633b0c0f0f116101c95780636bd9110e1161018d5780636bd9110e1461041c57806375b238fc1461044c57806379111c1c1461046a578063822d38851461048857806384efc52f146104925761023d565b80633b0c0f0f1461037a578063405fa2491461039657806343743570146103b257806351858e27146103ce57806356f25d27146103ec5761023d565b8063248a9ca311610210578063248a9ca3146102c65780632f04e064146102f65780632f2ff15d1461032657806336568abe1461034257806339c59de91461035e5761023d565b806301ffc9a7146102425780630416af2714610272578063088be8c31461028e5780631ae1ae7a146102aa575b600080fd5b61025c60048036038101906102579190613382565b610756565b60405161026991906133ca565b60405180910390f35b61028c60048036038101906102879190613443565b6107d0565b005b6102a860048036038101906102a391906135b6565b6109a5565b005b6102c460048036038101906102bf9190613677565b610c8d565b005b6102e060048036038101906102db91906136ed565b610d2e565b6040516102ed9190613729565b60405180910390f35b610310600480360381019061030b9190613443565b610d4d565b60405161031d9190613865565b60405180910390f35b610340600480360381019061033b9190613887565b610dde565b005b61035c60048036038101906103579190613887565b610e00565b005b61037860048036038101906103739190613443565b610e7b565b005b610394600480360381019061038f91906138c7565b610fc1565b005b6103b060048036038101906103ab91906139f6565b6113bf565b005b6103cc60048036038101906103c79190613a43565b61148d565b005b6103d66115a4565b6040516103e391906133ca565b60405180910390f35b61040660048036038101906104019190613443565b6115b7565b60405161041391906133ca565b60405180910390f35b61043660048036038101906104319190613443565b611645565b6040516104439190613aba565b60405180910390f35b6104546117e6565b6040516104619190613729565b60405180910390f35b61047261180a565b60405161047f9190613aeb565b60405180910390f35b61049061188c565b005b6104ac60048036038101906104a79190613443565b611a70565b6040516104b99190613b5d565b60405180910390f35b6104dc60048036038101906104d79190613443565b611b01565b005b6104f860048036038101906104f39190613887565b611d8b565b60405161050591906133ca565b60405180910390f35b610516611d9f565b6040516105239190613d9b565b60405180910390f35b61054660048036038101906105419190613443565b611e91565b60405161055391906133ca565b60405180910390f35b610564611eb1565b6040516105719190613e6c565b60405180910390f35b610594600480360381019061058f9190613443565b611f38565b6040516105a191906133ca565b60405180910390f35b6105c460048036038101906105bf9190613f2f565b6121b3565b005b6105ce61242e565b6040516105db9190613729565b60405180910390f35b6105fe60048036038101906105f99190613fe1565b612435565b005b61061a600480360381019061061591906135b6565b612611565b005b61062461287c565b6040516106319190613729565b60405180910390f35b6106426128a0565b60405161064f9190613d9b565b60405180910390f35b610672600480360381019061066d9190614055565b612992565b005b61067c612a4c565b6040516106899190613729565b60405180910390f35b6106ac60048036038101906106a79190613443565b612a70565b6040516106b9919061420d565b60405180910390f35b6106ca612d0d565b6040516106d79190613aeb565b60405180910390f35b6106fa60048036038101906106f59190613887565b612d8f565b005b610704612df4565b6040516107119190613e6c565b60405180910390f35b610722612e7b565b60405161072f9190613aeb565b60405180910390f35b610740612e81565b60405161074d9190613729565b60405180910390f35b60007f0aee930b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107c957506107c882612ea5565b5b9050919050565b6107fa7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8b565b610839576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108309061427b565b60405180910390fd5b600e60009054906101000a900460ff1680156108575750600f544210155b15610878576000600e60006101000a81548160ff0219169083151502179055505b600e60009054906101000a900460ff16156108c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bf906142e7565b60405180910390fd5b600473e7f1725E7734CE288F8367e1Bb143E90bb3F05126355c473879091836040518363ffffffff1660e01b815260040161090492919061431d565b60006040518083038186803b15801561091c57600080fd5b505af4158015610930573d6000803e3d6000fd5b5050505061095e7f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f82612f1f565b508073ffffffffffffffffffffffffffffffffffffffff167fc7053e532de062d754b8ed96090affe0c4ba36dde0a699de7dd5185a9a9e7d0f60405160405180910390a250565b6109cf7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8b565b610a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a059061427b565b60405180910390fd5b600e60009054906101000a900460ff168015610a2c5750600f544210155b15610a4d576000600e60006101000a81548160ff0219169083151502179055505b600e60009054906101000a900460ff1615610a9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a94906142e7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0390614392565b60405180910390fd5b600760000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615610b9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b96906143fe565b60405180910390fd5b610bc97fc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de6884613011565b50600773e7f1725E7734CE288F8367e1Bb143E90bb3F0512635da0371090918585856040518563ffffffff1660e01b8152600401610c0a949392919061446f565b60006040518083038186803b158015610c2257600080fd5b505af4158015610c36573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167ff780bede1449966edddb53884c0ea6892f688b86aa75813f703f4ee50ec16e5b83604051610c809190613aba565b60405180910390a2505050565b6001735FbDB2315678afecb367f032d93F642f64180aa363566a0d1290918333866040518563ffffffff1660e01b8152600401610ccd94939291906144d8565b60006040518083038186803b158015610ce557600080fd5b505af4158015610cf9573d6000803e3d6000fd5b50505050817f91ff4d16576040b78e69b4d9da7512a6b24c63472eb50154802f3e3f4ed5500e60405160405180910390a25050565b6000806000838152602001908152602001600020600101549050919050565b610d55613265565b600473e7f1725E7734CE288F8367e1Bb143E90bb3F05126349a839a79091846040518363ffffffff1660e01b8152600401610d9192919061431d565b600060405180830381865af4158015610dae573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dd791906146b8565b9050919050565b610de782610d2e565b610df081613102565b610dfa8383613011565b50505050565b610e08613116565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e6c576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e768282612f1f565b505050565b610ea57fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8b565b610ee4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edb9061427b565b60405180910390fd5b600773e7f1725E7734CE288F8367e1Bb143E90bb3F051263e075debc9091836040518363ffffffff1660e01b8152600401610f20929190614701565b60006040518083038186803b158015610f3857600080fd5b505af4158015610f4c573d6000803e3d6000fd5b50505050610f7a7fc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de6882612f1f565b508073ffffffffffffffffffffffffffffffffffffffff167f3d35d2ee499267c27c37466f419f5d2fb4f9d71671ba366201725410649035d360405160405180910390a250565b610feb7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8b565b61102a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110219061427b565b60405180910390fd5b600e60009054906101000a900460ff1680156110485750600f544210155b15611069576000600e60006101000a81548160ff0219169083151502179055505b600e60009054906101000a900460ff16156110b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b0906142e7565b60405180910390fd5b4283116110fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f290614776565b60405180910390fd5b600084511161113f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611136906147e2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036111ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a590614392565b60405180910390fd5b60008251116111f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e99061484e565b60405180910390fd5b6000815111611236576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122d906148ba565b60405180910390fd5b600460000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff16156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c090614926565b60405180910390fd5b6112f37f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f86613011565b50600473e7f1725E7734CE288F8367e1Bb143E90bb3F0512638e7cc4bc909187878787876040518763ffffffff1660e01b815260040161133896959493929190614946565b60006040518083038186803b15801561135057600080fd5b505af4158015611364573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f1f5e33d2573da99a901bca6b2c06d5f12b75dfd179bcbbe46a5216cf8349ee6b85856040516113b09291906149bc565b60405180910390a25050505050565b7f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed6113e981613102565b8282600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209182611437929190614c03565b503373ffffffffffffffffffffffffffffffffffffffff167f4b33dafb50dac5530c30aca4e4069fd67a18220888b874b8519558d1769d49a18484604051611480929190614d00565b60405180910390a2505050565b6114b77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8b565b6114f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ed9061427b565b60405180910390fd5b600e60009054906101000a900460ff1615600e60006101000a81548160ff021916908315150217905550600e60009054906101000a900460ff1661153b576000611555565b610e10816115499190614d53565b426115549190614d95565b5b600f819055507f9077d36bc00859b5c3f320310707208543dd35092cb0a0fe117d0c6a558b148b600e60009054906101000a900460ff1660405161159991906133ca565b60405180910390a150565b600e60009054906101000a900460ff1681565b60006115e37fc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de6883611d8b565b801561163e5750600760000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff165b9050919050565b60608173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806116a757506116a67fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8b565b5b806116d857506116d77f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f33611d8b565b5b611717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170e90614e15565b60405180910390fd5b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461176190614a26565b80601f016020809104026020016040519081016040528092919081815260200182805461178d90614a26565b80156117da5780601f106117af576101008083540402835291602001916117da565b820191906000526020600020905b8154815290600101906020018083116117bd57829003601f168201915b50505050509050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6000600473e7f1725E7734CE288F8367e1Bb143E90bb3F051263c5f5d36f90916040518263ffffffff1660e01b81526004016118469190614e35565b602060405180830381865af4158015611863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118879190614e50565b905090565b600e60009054906101000a900460ff1680156118aa5750600f544210155b156118cb576000600e60006101000a81548160ff0219169083151502179055505b600e60009054906101000a900460ff161561191b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611912906142e7565b60405180910390fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156119a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199f90614ec9565b60405180910390fd5b6119d27f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed33613011565b506001600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fc9fa2003fca4ce0dfc8cb0deae32266b715536df6685365b05b5be96ede8e49c60405160405180910390a2565b611a78613296565b600773e7f1725E7734CE288F8367e1Bb143E90bb3F05126326dd7c369091846040518363ffffffff1660e01b8152600401611ab4929190614701565b600060405180830381865af4158015611ad1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611afa9190614f85565b9050919050565b6000600160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b8180549050811015611ca4578273ffffffffffffffffffffffffffffffffffffffff16828281548110611b8057611b7f614fce565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015611c035750818181548110611be357611be2614fce565b5b906000526020600020906006020160050160009054906101000a900460ff165b15611c97576000828281548110611c1d57611c1c614fce565b5b906000526020600020906006020160050160006101000a81548160ff021916908315150217905550818181548110611c5857611c57614fce565b5b9060005260206000209060060201600001547f91ff4d16576040b78e69b4d9da7512a6b24c63472eb50154802f3e3f4ed5500e60405160405180910390a25b8080600101915050611b4a565b50600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611d2d91906132b9565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f825c8be24eb0df19500f63e86c29e7d0d951e73056b889b891d85e40938d9b6e60405160405180910390a35050565b6000611d97838361311e565b905092915050565b6060611dcb7f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed33611d8b565b611e0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0190615049565b60405180910390fd5b6001735FbDB2315678afecb367f032d93F642f64180aa363307f87169091336040518363ffffffff1660e01b8152600401611e46929190615069565b600060405180830381865af4158015611e63573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e8c9190615325565b905090565b600a6020528060005260406000206000915054906101000a900460ff1681565b6060600773e7f1725E7734CE288F8367e1Bb143E90bb3F0512638f77b68d90916040518263ffffffff1660e01b8152600401611eed919061536e565b600060405180830381865af4158015611f0a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611f33919061544c565b905090565b600080600460000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082018054611f9890614a26565b80601f0160208091040260200160405190810160405280929190818152602001828054611fc490614a26565b80156120115780601f10611fe657610100808354040283529160200191612011565b820191906000526020600020905b815481529060010190602001808311611ff457829003601f168201915b505050505081526020016001820154815260200160028201805461203490614a26565b80601f016020809104026020016040519081016040528092919081815260200182805461206090614a26565b80156120ad5780601f10612082576101008083540402835291602001916120ad565b820191906000526020600020905b81548152906001019060200180831161209057829003601f168201915b505050505081526020016003820180546120c690614a26565b80601f01602080910402602001604051908101604052809291908181526020018280546120f290614a26565b801561213f5780601f106121145761010080835404028352916020019161213f565b820191906000526020600020905b81548152906001019060200180831161212257829003601f168201915b505050505081526020016004820160009054906101000a900460ff161515151581525050905061218f7f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f84611d8b565b801561219c575080608001515b80156121ab5750428160200151115b915050919050565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b81805490508110156123ee578382828154811061221957612218614fce565b5b906000526020600020906007020160000154036123e157600182828154811061224557612244614fce565b5b906000526020600020906007020160060160006101000a81548160ff02191690831515021790555082600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008484815481106122c2576122c1614fce565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908161233a91906154fb565b503373ffffffffffffffffffffffffffffffffffffffff1682828154811061236557612364614fce565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16857f734eac5b54039ed4ed359c7034f5c743cbea175340fc22ca139f102119991ce960405160405180910390a4505061242a565b80806001019150506121f9565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242190615619565b60405180910390fd5b5050565b6000801b81565b7f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed61245f81613102565b6124897f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f86611d8b565b6124c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124bf90615685565b60405180910390fd5b6000821161250b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612502906156f1565b60405180910390fd5b60006001735FbDB2315678afecb367f032d93F642f64180aa3634f6601e0909188338989896040518763ffffffff1660e01b815260040161255196959493929190615875565b602060405180830381865af415801561256e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125929190614e50565b90503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16827fefe5b72062702550465fdc2e5b73521c231f083cba1fd798d285715f9f483d6e86426125f09190614d95565b89896040516126019392919061599b565b60405180910390a4505050505050565b7f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f61263b81613102565b60006001600201549050600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020014281526020016000151581525090806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030190816127bc91906159cd565b5060808201518160040190816127d291906159cd565b5060a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555050506001600201600081548092919061281590615a9f565b91905055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16827fc0d9df9d6d8acee28356fcc24c0de4597104943515c4c0b12fb3d6b1ca74b0ee60405160405180910390a45050505050565b7f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed81565b60606128cc7f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f33611d8b565b61290b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290290615b33565b60405180910390fd5b6001735FbDB2315678afecb367f032d93F642f64180aa3635af180509091336040518363ffffffff1660e01b8152600401612947929190615069565b600060405180830381865af4158015612964573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061298d9190615325565b905090565b6001735FbDB2315678afecb367f032d93F642f64180aa363682ff3219091843387866040518663ffffffff1660e01b81526004016129d4959493929190615b53565b60006040518083038186803b1580156129ec57600080fd5b505af4158015612a00573d6000803e3d6000fd5b50505050827fe32aab36a0db5d8c977134f45af8266890345c66229dd59f9ecdf663668d47318242612a329190614d95565b604051612a3f9190613aeb565b60405180910390a2505050565b7fc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de6881565b6060600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015612d0257838290600052602060002090600702016040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054612bba90614a26565b80601f0160208091040260200160405190810160405280929190818152602001828054612be690614a26565b8015612c335780601f10612c0857610100808354040283529160200191612c33565b820191906000526020600020905b815481529060010190602001808311612c1657829003601f168201915b50505050508152602001600482018054612c4c90614a26565b80601f0160208091040260200160405190810160405280929190818152602001828054612c7890614a26565b8015612cc55780601f10612c9a57610100808354040283529160200191612cc5565b820191906000526020600020905b815481529060010190602001808311612ca857829003601f168201915b50505050508152602001600582015481526020016006820160009054906101000a900460ff16151515158152505081526020019060010190612ad1565b505050509050919050565b6000600773e7f1725E7734CE288F8367e1Bb143E90bb3F051263f3208c1e90916040518263ffffffff1660e01b8152600401612d49919061536e565b602060405180830381865af4158015612d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8a9190614e50565b905090565b612d9882610d2e565b612da181613102565b612dab8383613188565b8173ffffffffffffffffffffffffffffffffffffffff16837fcfb95b05744d1dc2a42dc08bf4bd2ed68f381aeac3c9b1a6250a6120e236ba8860405160405180910390a3505050565b6060600473e7f1725E7734CE288F8367e1Bb143E90bb3F0512637e39afd690916040518263ffffffff1660e01b8152600401612e309190614e35565b600060405180830381865af4158015612e4d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612e76919061544c565b905090565b600f5481565b7f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f81565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612f185750612f17826131aa565b5b9050919050565b6000612f2b8383611d8b565b1561300657600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612fa3613116565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a46001905061300b565b600090505b92915050565b600061301d8383611d8b565b6130f757600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613094613116565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506130fc565b600090505b92915050565b6131138161310e613116565b613214565b50565b600033905090565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61319182610d2e565b61319a81613102565b6131a48383612f1f565b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61321e8282611d8b565b6132615780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401613258929190615bb5565b60405180910390fd5b5050565b6040518060a00160405280606081526020016000815260200160608152602001606081526020016000151581525090565b604051806060016040528060608152602001606081526020016000151581525090565b5080546132c590614a26565b6000825580601f106132d757506132f6565b601f0160209004906000526020600020908101906132f591906132f9565b5b50565b5b808211156133125760008160009055506001016132fa565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61335f8161332a565b811461336a57600080fd5b50565b60008135905061337c81613356565b92915050565b60006020828403121561339857613397613320565b5b60006133a68482850161336d565b91505092915050565b60008115159050919050565b6133c4816133af565b82525050565b60006020820190506133df60008301846133bb565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613410826133e5565b9050919050565b61342081613405565b811461342b57600080fd5b50565b60008135905061343d81613417565b92915050565b60006020828403121561345957613458613320565b5b60006134678482850161342e565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134c38261347a565b810181811067ffffffffffffffff821117156134e2576134e161348b565b5b80604052505050565b60006134f5613316565b905061350182826134ba565b919050565b600067ffffffffffffffff8211156135215761352061348b565b5b61352a8261347a565b9050602081019050919050565b82818337600083830152505050565b600061355961355484613506565b6134eb565b90508281526020810184848401111561357557613574613475565b5b613580848285613537565b509392505050565b600082601f83011261359d5761359c613470565b5b81356135ad848260208601613546565b91505092915050565b6000806000606084860312156135cf576135ce613320565b5b60006135dd8682870161342e565b935050602084013567ffffffffffffffff8111156135fe576135fd613325565b5b61360a86828701613588565b925050604084013567ffffffffffffffff81111561362b5761362a613325565b5b61363786828701613588565b9150509250925092565b6000819050919050565b61365481613641565b811461365f57600080fd5b50565b6000813590506136718161364b565b92915050565b6000806040838503121561368e5761368d613320565b5b600061369c85828601613662565b92505060206136ad8582860161342e565b9150509250929050565b6000819050919050565b6136ca816136b7565b81146136d557600080fd5b50565b6000813590506136e7816136c1565b92915050565b60006020828403121561370357613702613320565b5b6000613711848285016136d8565b91505092915050565b613723816136b7565b82525050565b600060208201905061373e600083018461371a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561377e578082015181840152602081019050613763565b60008484015250505050565b600061379582613744565b61379f818561374f565b93506137af818560208601613760565b6137b88161347a565b840191505092915050565b6137cc81613641565b82525050565b6137db816133af565b82525050565b600060a08301600083015184820360008601526137fe828261378a565b915050602083015161381360208601826137c3565b506040830151848203604086015261382b828261378a565b91505060608301518482036060860152613845828261378a565b915050608083015161385a60808601826137d2565b508091505092915050565b6000602082019050818103600083015261387f81846137e1565b905092915050565b6000806040838503121561389e5761389d613320565b5b60006138ac858286016136d8565b92505060206138bd8582860161342e565b9150509250929050565b600080600080600060a086880312156138e3576138e2613320565b5b60006138f18882890161342e565b955050602086013567ffffffffffffffff81111561391257613911613325565b5b61391e88828901613588565b945050604061392f88828901613662565b935050606086013567ffffffffffffffff8111156139505761394f613325565b5b61395c88828901613588565b925050608086013567ffffffffffffffff81111561397d5761397c613325565b5b61398988828901613588565b9150509295509295909350565b600080fd5b600080fd5b60008083601f8401126139b6576139b5613470565b5b8235905067ffffffffffffffff8111156139d3576139d2613996565b5b6020830191508360018202830111156139ef576139ee61399b565b5b9250929050565b60008060208385031215613a0d57613a0c613320565b5b600083013567ffffffffffffffff811115613a2b57613a2a613325565b5b613a37858286016139a0565b92509250509250929050565b600060208284031215613a5957613a58613320565b5b6000613a6784828501613662565b91505092915050565b600082825260208201905092915050565b6000613a8c82613744565b613a968185613a70565b9350613aa6818560208601613760565b613aaf8161347a565b840191505092915050565b60006020820190508181036000830152613ad48184613a81565b905092915050565b613ae581613641565b82525050565b6000602082019050613b006000830184613adc565b92915050565b60006060830160008301518482036000860152613b23828261378a565b91505060208301518482036020860152613b3d828261378a565b9150506040830151613b5260408601826137d2565b508091505092915050565b60006020820190508181036000830152613b778184613b06565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613bb481613405565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613bf2838361378a565b905092915050565b6000602082019050919050565b6000613c1282613bba565b613c1c8185613bc5565b935083602082028501613c2e85613bd6565b8060005b85811015613c6a5784840389528151613c4b8582613be6565b9450613c5683613bfa565b925060208a01995050600181019050613c32565b50829750879550505050505092915050565b600060c083016000830151613c9460008601826137c3565b506020830151613ca76020860182613bab565b506040830151613cba6040860182613bab565b506060830151613ccd60608601826137c3565b5060808301518482036080860152613ce58282613c07565b91505060a0830151613cfa60a08601826137d2565b508091505092915050565b6000613d118383613c7c565b905092915050565b6000602082019050919050565b6000613d3182613b7f565b613d3b8185613b8a565b935083602082028501613d4d85613b9b565b8060005b85811015613d895784840389528151613d6a8582613d05565b9450613d7583613d19565b925060208a01995050600181019050613d51565b50829750879550505050505092915050565b60006020820190508181036000830152613db58184613d26565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613df58383613bab565b60208301905092915050565b6000602082019050919050565b6000613e1982613dbd565b613e238185613dc8565b9350613e2e83613dd9565b8060005b83811015613e5f578151613e468882613de9565b9750613e5183613e01565b925050600181019050613e32565b5085935050505092915050565b60006020820190508181036000830152613e868184613e0e565b905092915050565b600067ffffffffffffffff821115613ea957613ea861348b565b5b613eb28261347a565b9050602081019050919050565b6000613ed2613ecd84613e8e565b6134eb565b905082815260208101848484011115613eee57613eed613475565b5b613ef9848285613537565b509392505050565b600082601f830112613f1657613f15613470565b5b8135613f26848260208601613ebf565b91505092915050565b60008060408385031215613f4657613f45613320565b5b6000613f5485828601613662565b925050602083013567ffffffffffffffff811115613f7557613f74613325565b5b613f8185828601613f01565b9150509250929050565b60008083601f840112613fa157613fa0613470565b5b8235905067ffffffffffffffff811115613fbe57613fbd613996565b5b602083019150836020820283011115613fda57613fd961399b565b5b9250929050565b60008060008060608587031215613ffb57613ffa613320565b5b60006140098782880161342e565b945050602085013567ffffffffffffffff81111561402a57614029613325565b5b61403687828801613f8b565b9350935050604061404987828801613662565b91505092959194509250565b60008060006060848603121561406e5761406d613320565b5b600061407c86828701613662565b935050602061408d8682870161342e565b925050604061409e86828701613662565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060e0830160008301516140ec60008601826137c3565b5060208301516140ff6020860182613bab565b5060408301516141126040860182613bab565b506060830151848203606086015261412a828261378a565b91505060808301518482036080860152614144828261378a565b91505060a083015161415960a08601826137c3565b5060c083015161416c60c08601826137d2565b508091505092915050565b600061418383836140d4565b905092915050565b6000602082019050919050565b60006141a3826140a8565b6141ad81856140b3565b9350836020820285016141bf856140c4565b8060005b858110156141fb57848403895281516141dc8582614177565b94506141e78361418b565b925060208a019950506001810190506141c3565b50829750879550505050505092915050565b600060208201905081810360008301526142278184614198565b905092915050565b7f43616c6c6572206973206e6f7420616e2041646d696e00000000000000000000600082015250565b6000614265601683613a70565b91506142708261422f565b602082019050919050565b6000602082019050818103600083015261429481614258565b9050919050565b7f436f6e7472616374207061757365640000000000000000000000000000000000600082015250565b60006142d1600f83613a70565b91506142dc8261429b565b602082019050919050565b60006020820190508181036000830152614300816142c4565b9050919050565b8082525050565b61431781613405565b82525050565b60006040820190506143326000830185614307565b61433f602083018461430e565b9392505050565b7f496e76616c696420416464726573730000000000000000000000000000000000600082015250565b600061437c600f83613a70565b915061438782614346565b602082019050919050565b600060208201905081810360008301526143ab8161436f565b9050919050565b7f506861726d616369737420616c72656164792052656769737465726564000000600082015250565b60006143e8601d83613a70565b91506143f3826143b2565b602082019050919050565b60006020820190508181036000830152614417816143db565b9050919050565b8082525050565b600082825260208201905092915050565b600061444182613744565b61444b8185614425565b935061445b818560208601613760565b6144648161347a565b840191505092915050565b6000608082019050614484600083018761441e565b614491602083018661430e565b81810360408301526144a38185614436565b905081810360608301526144b78184614436565b905095945050505050565b8082525050565b6144d281613641565b82525050565b60006080820190506144ed60008301876144c2565b6144fa602083018661430e565b614507604083018561430e565b61451460608301846144c9565b95945050505050565b600080fd5b600080fd5b600061453a61453584613506565b6134eb565b90508281526020810184848401111561455657614555613475565b5b614561848285613760565b509392505050565b600082601f83011261457e5761457d613470565b5b815161458e848260208601614527565b91505092915050565b6000815190506145a68161364b565b92915050565b6145b5816133af565b81146145c057600080fd5b50565b6000815190506145d2816145ac565b92915050565b600060a082840312156145ee576145ed61451d565b5b6145f860a06134eb565b9050600082015167ffffffffffffffff81111561461857614617614522565b5b61462484828501614569565b600083015250602061463884828501614597565b602083015250604082015167ffffffffffffffff81111561465c5761465b614522565b5b61466884828501614569565b604083015250606082015167ffffffffffffffff81111561468c5761468b614522565b5b61469884828501614569565b60608301525060806146ac848285016145c3565b60808301525092915050565b6000602082840312156146ce576146cd613320565b5b600082015167ffffffffffffffff8111156146ec576146eb613325565b5b6146f8848285016145d8565b91505092915050565b6000604082019050614716600083018561441e565b614723602083018461430e565b9392505050565b7f4c6963656e736520457870697265640000000000000000000000000000000000600082015250565b6000614760600f83613a70565b915061476b8261472a565b602082019050919050565b6000602082019050818103600083015261478f81614753565b9050919050565b7f496e76616c6964204c6963656e73650000000000000000000000000000000000600082015250565b60006147cc600f83613a70565b91506147d782614796565b602082019050919050565b600060208201905081810360008301526147fb816147bf565b9050919050565b7f4e616d6520726571756972656400000000000000000000000000000000000000600082015250565b6000614838600d83613a70565b915061484382614802565b602082019050919050565b600060208201905081810360008301526148678161482b565b9050919050565b7f5370656369616c697a6174696f6e207265717569726564000000000000000000600082015250565b60006148a4601783613a70565b91506148af8261486e565b602082019050919050565b600060208201905081810360008301526148d381614897565b9050919050565b7f446f63746f7220616c7265616479207265676973746572656400000000000000600082015250565b6000614910601983613a70565b915061491b826148da565b602082019050919050565b6000602082019050818103600083015261493f81614903565b9050919050565b600060c08201905061495b6000830189614307565b614968602083018861430e565b818103604083015261497a8187614436565b905061498960608301866144c9565b818103608083015261499b8185614436565b905081810360a08301526149af8184614436565b9050979650505050505050565b600060408201905081810360008301526149d68185613a81565b90506149e56020830184613adc565b9392505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614a3e57607f821691505b602082108103614a5157614a506149f7565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614ab97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614a7c565b614ac38683614a7c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000614b00614afb614af684613641565b614adb565b613641565b9050919050565b6000819050919050565b614b1a83614ae5565b614b2e614b2682614b07565b848454614a89565b825550505050565b600090565b614b43614b36565b614b4e818484614b11565b505050565b5b81811015614b7257614b67600082614b3b565b600181019050614b54565b5050565b601f821115614bb757614b8881614a57565b614b9184614a6c565b81016020851015614ba0578190505b614bb4614bac85614a6c565b830182614b53565b50505b505050565b600082821c905092915050565b6000614bda60001984600802614bbc565b1980831691505092915050565b6000614bf38383614bc9565b9150826002028217905092915050565b614c0d83836149ec565b67ffffffffffffffff811115614c2657614c2561348b565b5b614c308254614a26565b614c3b828285614b76565b6000601f831160018114614c6a5760008415614c58578287013590505b614c628582614be7565b865550614cca565b601f198416614c7886614a57565b60005b82811015614ca057848901358255600182019150602085019450602081019050614c7b565b86831015614cbd5784890135614cb9601f891682614bc9565b8355505b6001600288020188555050505b50505050505050565b6000614cdf8385613a70565b9350614cec838584613537565b614cf58361347a565b840190509392505050565b60006020820190508181036000830152614d1b818486614cd3565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614d5e82613641565b9150614d6983613641565b9250828202614d7781613641565b91508282048414831517614d8e57614d8d614d24565b5b5092915050565b6000614da082613641565b9150614dab83613641565b9250828201905080821115614dc357614dc2614d24565b5b92915050565b7f4e6f206163636573730000000000000000000000000000000000000000000000600082015250565b6000614dff600983613a70565b9150614e0a82614dc9565b602082019050919050565b60006020820190508181036000830152614e2e81614df2565b9050919050565b6000602082019050614e4a6000830184614307565b92915050565b600060208284031215614e6657614e65613320565b5b6000614e7484828501614597565b91505092915050565b7f50617469656e7420616c72656164792072656769737465726564000000000000600082015250565b6000614eb3601a83613a70565b9150614ebe82614e7d565b602082019050919050565b60006020820190508181036000830152614ee281614ea6565b9050919050565b600060608284031215614eff57614efe61451d565b5b614f0960606134eb565b9050600082015167ffffffffffffffff811115614f2957614f28614522565b5b614f3584828501614569565b600083015250602082015167ffffffffffffffff811115614f5957614f58614522565b5b614f6584828501614569565b6020830152506040614f79848285016145c3565b60408301525092915050565b600060208284031215614f9b57614f9a613320565b5b600082015167ffffffffffffffff811115614fb957614fb8613325565b5b614fc584828501614ee9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f43616c6c6572206973206e6f7420612070617469656e74000000000000000000600082015250565b6000615033601783613a70565b915061503e82614ffd565b602082019050919050565b6000602082019050818103600083015261506281615026565b9050919050565b600060408201905061507e60008301856144c2565b61508b602083018461430e565b9392505050565b600067ffffffffffffffff8211156150ad576150ac61348b565b5b602082029050602081019050919050565b6000815190506150cd81613417565b92915050565b600067ffffffffffffffff8211156150ee576150ed61348b565b5b602082029050602081019050919050565b600061511261510d846150d3565b6134eb565b905080838252602082019050602084028301858111156151355761513461399b565b5b835b8181101561517c57805167ffffffffffffffff81111561515a57615159613470565b5b8086016151678982614569565b85526020850194505050602081019050615137565b5050509392505050565b600082601f83011261519b5761519a613470565b5b81516151ab8482602086016150ff565b91505092915050565b600060c082840312156151ca576151c961451d565b5b6151d460c06134eb565b905060006151e484828501614597565b60008301525060206151f8848285016150be565b602083015250604061520c848285016150be565b604083015250606061522084828501614597565b606083015250608082015167ffffffffffffffff81111561524457615243614522565b5b61525084828501615186565b60808301525060a0615264848285016145c3565b60a08301525092915050565b600061528361527e84615092565b6134eb565b905080838252602082019050602084028301858111156152a6576152a561399b565b5b835b818110156152ed57805167ffffffffffffffff8111156152cb576152ca613470565b5b8086016152d889826151b4565b855260208501945050506020810190506152a8565b5050509392505050565b600082601f83011261530c5761530b613470565b5b815161531c848260208601615270565b91505092915050565b60006020828403121561533b5761533a613320565b5b600082015167ffffffffffffffff81111561535957615358613325565b5b615365848285016152f7565b91505092915050565b6000602082019050615383600083018461441e565b92915050565b600067ffffffffffffffff8211156153a4576153a361348b565b5b602082029050602081019050919050565b60006153c86153c384615389565b6134eb565b905080838252602082019050602084028301858111156153eb576153ea61399b565b5b835b81811015615414578061540088826150be565b8452602084019350506020810190506153ed565b5050509392505050565b600082601f83011261543357615432613470565b5b81516154438482602086016153b5565b91505092915050565b60006020828403121561546257615461613320565b5b600082015167ffffffffffffffff8111156154805761547f613325565b5b61548c8482850161541e565b91505092915050565b600081519050919050565b60008190508160005260206000209050919050565b601f8211156154f6576154c7816154a0565b6154d084614a6c565b810160208510156154df578190505b6154f36154eb85614a6c565b830182614b53565b50505b505050565b61550482615495565b67ffffffffffffffff81111561551d5761551c61348b565b5b6155278254614a26565b6155328282856154b5565b600060209050601f8311600181146155655760008415615553578287015190505b61555d8582614be7565b8655506155c5565b601f198416615573866154a0565b60005b8281101561559b57848901518255600182019150602085019450602081019050615576565b868310156155b857848901516155b4601f891682614bc9565b8355505b6001600288020188555050505b505050505050565b7f52657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b6000615603601183613a70565b915061560e826155cd565b602082019050919050565b60006020820190508181036000830152615632816155f6565b9050919050565b7f4e6f7420612076616c696420646f63746f720000000000000000000000000000600082015250565b600061566f601283613a70565b915061567a82615639565b602082019050919050565b6000602082019050818103600083015261569e81615662565b9050919050565b7f4475726174696f6e206d75737420626520706f73697469766500000000000000600082015250565b60006156db601983613a70565b91506156e6826156a5565b602082019050919050565b6000602082019050818103600083015261570a816156ce565b9050919050565b600082825260208201905092915050565b6000819050919050565b600082825260208201905092915050565b6000615749838561572c565b9350615756838584613537565b61575f8361347a565b840190509392505050565b600061577784848461573d565b90509392505050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126157ac576157ab61578a565b5b83810192508235915060208301925067ffffffffffffffff8211156157d4576157d3615780565b5b6001820236038313156157ea576157e9615785565b5b509250929050565b6000602082019050919050565b600061580b8385615711565b93508360208402850161581d84615722565b8060005b87811015615863578484038952615838828461578f565b61584386828461576a565b955061584e846157f2565b935060208b019a505050600181019050615821565b50829750879450505050509392505050565b600060a08201905061588a60008301896144c2565b615897602083018861430e565b6158a4604083018761430e565b81810360608301526158b78185876157ff565b90506158c660808301846144c9565b979650505050505050565b600082825260208201905092915050565b60006158ee838561374f565b93506158fb838584613537565b6159048361347a565b840190509392505050565b600061591c8484846158e2565b90509392505050565b600061593183856158d1565b93508360208402850161594384615722565b8060005b8781101561598957848403895261595e828461578f565b61596986828461590f565b9550615974846157f2565b935060208b019a505050600181019050615947565b50829750879450505050509392505050565b60006040820190506159b06000830186613adc565b81810360208301526159c3818486615925565b9050949350505050565b6159d682613744565b67ffffffffffffffff8111156159ef576159ee61348b565b5b6159f98254614a26565b615a04828285614b76565b600060209050601f831160018114615a375760008415615a25578287015190505b615a2f8582614be7565b865550615a97565b601f198416615a4586614a57565b60005b82811015615a6d57848901518255600182019150602085019450602081019050615a48565b86831015615a8a5784890151615a86601f891682614bc9565b8355505b6001600288020188555050505b505050505050565b6000615aaa82613641565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203615adc57615adb614d24565b5b600182019050919050565b7f43616c6c6572206973206e6f74206120646f63746f7200000000000000000000600082015250565b6000615b1d601683613a70565b9150615b2882615ae7565b602082019050919050565b60006020820190508181036000830152615b4c81615b10565b9050919050565b600060a082019050615b6860008301886144c2565b615b75602083018761430e565b615b82604083018661430e565b615b8f60608301856144c9565b615b9c60808301846144c9565b9695505050505050565b615baf81613405565b82525050565b6000604082019050615bca6000830185615ba6565b615bd7602083018461371a565b939250505056fea264697066735822122089c7728f674babe7c5ef08ce88bba29ce2b7b5c0c7c969540e1fdc09cf8f279e64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c806385e685311161013b578063ac5cb97d116100b8578063d1eb16521161007c578063d1eb1652146106c2578063d547741f146106e0578063f0d95090146106fc578063f125af6b1461071a578063fec331f2146107385761023d565b8063ac5cb97d1461061c578063b9b3d29b1461063a578063be762dcc14610658578063c532d9fa14610674578063cf374334146106925761023d565b80639f8a13d7116100ff5780639f8a13d71461057a578063a1a72362146105aa578063a217fddf146105c6578063a6af1606146105e4578063a7e29814146106005761023d565b806385e68531146104c257806391d14854146104de5780639c3871141461050e5780639c80cfa31461052c5780639db92d681461055c5761023d565b80633b0c0f0f116101c95780636bd9110e1161018d5780636bd9110e1461041c57806375b238fc1461044c57806379111c1c1461046a578063822d38851461048857806384efc52f146104925761023d565b80633b0c0f0f1461037a578063405fa2491461039657806343743570146103b257806351858e27146103ce57806356f25d27146103ec5761023d565b8063248a9ca311610210578063248a9ca3146102c65780632f04e064146102f65780632f2ff15d1461032657806336568abe1461034257806339c59de91461035e5761023d565b806301ffc9a7146102425780630416af2714610272578063088be8c31461028e5780631ae1ae7a146102aa575b600080fd5b61025c60048036038101906102579190613382565b610756565b60405161026991906133ca565b60405180910390f35b61028c60048036038101906102879190613443565b6107d0565b005b6102a860048036038101906102a391906135b6565b6109a5565b005b6102c460048036038101906102bf9190613677565b610c8d565b005b6102e060048036038101906102db91906136ed565b610d2e565b6040516102ed9190613729565b60405180910390f35b610310600480360381019061030b9190613443565b610d4d565b60405161031d9190613865565b60405180910390f35b610340600480360381019061033b9190613887565b610dde565b005b61035c60048036038101906103579190613887565b610e00565b005b61037860048036038101906103739190613443565b610e7b565b005b610394600480360381019061038f91906138c7565b610fc1565b005b6103b060048036038101906103ab91906139f6565b6113bf565b005b6103cc60048036038101906103c79190613a43565b61148d565b005b6103d66115a4565b6040516103e391906133ca565b60405180910390f35b61040660048036038101906104019190613443565b6115b7565b60405161041391906133ca565b60405180910390f35b61043660048036038101906104319190613443565b611645565b6040516104439190613aba565b60405180910390f35b6104546117e6565b6040516104619190613729565b60405180910390f35b61047261180a565b60405161047f9190613aeb565b60405180910390f35b61049061188c565b005b6104ac60048036038101906104a79190613443565b611a70565b6040516104b99190613b5d565b60405180910390f35b6104dc60048036038101906104d79190613443565b611b01565b005b6104f860048036038101906104f39190613887565b611d8b565b60405161050591906133ca565b60405180910390f35b610516611d9f565b6040516105239190613d9b565b60405180910390f35b61054660048036038101906105419190613443565b611e91565b60405161055391906133ca565b60405180910390f35b610564611eb1565b6040516105719190613e6c565b60405180910390f35b610594600480360381019061058f9190613443565b611f38565b6040516105a191906133ca565b60405180910390f35b6105c460048036038101906105bf9190613f2f565b6121b3565b005b6105ce61242e565b6040516105db9190613729565b60405180910390f35b6105fe60048036038101906105f99190613fe1565b612435565b005b61061a600480360381019061061591906135b6565b612611565b005b61062461287c565b6040516106319190613729565b60405180910390f35b6106426128a0565b60405161064f9190613d9b565b60405180910390f35b610672600480360381019061066d9190614055565b612992565b005b61067c612a4c565b6040516106899190613729565b60405180910390f35b6106ac60048036038101906106a79190613443565b612a70565b6040516106b9919061420d565b60405180910390f35b6106ca612d0d565b6040516106d79190613aeb565b60405180910390f35b6106fa60048036038101906106f59190613887565b612d8f565b005b610704612df4565b6040516107119190613e6c565b60405180910390f35b610722612e7b565b60405161072f9190613aeb565b60405180910390f35b610740612e81565b60405161074d9190613729565b60405180910390f35b60007f0aee930b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107c957506107c882612ea5565b5b9050919050565b6107fa7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8b565b610839576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108309061427b565b60405180910390fd5b600e60009054906101000a900460ff1680156108575750600f544210155b15610878576000600e60006101000a81548160ff0219169083151502179055505b600e60009054906101000a900460ff16156108c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bf906142e7565b60405180910390fd5b600473__$f25c482e92a731d9ed43127d815f1df244$__6355c473879091836040518363ffffffff1660e01b815260040161090492919061431d565b60006040518083038186803b15801561091c57600080fd5b505af4158015610930573d6000803e3d6000fd5b5050505061095e7f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f82612f1f565b508073ffffffffffffffffffffffffffffffffffffffff167fc7053e532de062d754b8ed96090affe0c4ba36dde0a699de7dd5185a9a9e7d0f60405160405180910390a250565b6109cf7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8b565b610a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a059061427b565b60405180910390fd5b600e60009054906101000a900460ff168015610a2c5750600f544210155b15610a4d576000600e60006101000a81548160ff0219169083151502179055505b600e60009054906101000a900460ff1615610a9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a94906142e7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0390614392565b60405180910390fd5b600760000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1615610b9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b96906143fe565b60405180910390fd5b610bc97fc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de6884613011565b50600773__$f25c482e92a731d9ed43127d815f1df244$__635da0371090918585856040518563ffffffff1660e01b8152600401610c0a949392919061446f565b60006040518083038186803b158015610c2257600080fd5b505af4158015610c36573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167ff780bede1449966edddb53884c0ea6892f688b86aa75813f703f4ee50ec16e5b83604051610c809190613aba565b60405180910390a2505050565b600173__$fa020a500783576cb949474ac6940fd299$__63566a0d1290918333866040518563ffffffff1660e01b8152600401610ccd94939291906144d8565b60006040518083038186803b158015610ce557600080fd5b505af4158015610cf9573d6000803e3d6000fd5b50505050817f91ff4d16576040b78e69b4d9da7512a6b24c63472eb50154802f3e3f4ed5500e60405160405180910390a25050565b6000806000838152602001908152602001600020600101549050919050565b610d55613265565b600473__$f25c482e92a731d9ed43127d815f1df244$__6349a839a79091846040518363ffffffff1660e01b8152600401610d9192919061431d565b600060405180830381865af4158015610dae573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dd791906146b8565b9050919050565b610de782610d2e565b610df081613102565b610dfa8383613011565b50505050565b610e08613116565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e6c576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e768282612f1f565b505050565b610ea57fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8b565b610ee4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edb9061427b565b60405180910390fd5b600773__$f25c482e92a731d9ed43127d815f1df244$__63e075debc9091836040518363ffffffff1660e01b8152600401610f20929190614701565b60006040518083038186803b158015610f3857600080fd5b505af4158015610f4c573d6000803e3d6000fd5b50505050610f7a7fc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de6882612f1f565b508073ffffffffffffffffffffffffffffffffffffffff167f3d35d2ee499267c27c37466f419f5d2fb4f9d71671ba366201725410649035d360405160405180910390a250565b610feb7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8b565b61102a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110219061427b565b60405180910390fd5b600e60009054906101000a900460ff1680156110485750600f544210155b15611069576000600e60006101000a81548160ff0219169083151502179055505b600e60009054906101000a900460ff16156110b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b0906142e7565b60405180910390fd5b4283116110fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f290614776565b60405180910390fd5b600084511161113f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611136906147e2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036111ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a590614392565b60405180910390fd5b60008251116111f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e99061484e565b60405180910390fd5b6000815111611236576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122d906148ba565b60405180910390fd5b600460000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff16156112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c090614926565b60405180910390fd5b6112f37f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f86613011565b50600473__$f25c482e92a731d9ed43127d815f1df244$__638e7cc4bc909187878787876040518763ffffffff1660e01b815260040161133896959493929190614946565b60006040518083038186803b15801561135057600080fd5b505af4158015611364573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f1f5e33d2573da99a901bca6b2c06d5f12b75dfd179bcbbe46a5216cf8349ee6b85856040516113b09291906149bc565b60405180910390a25050505050565b7f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed6113e981613102565b8282600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209182611437929190614c03565b503373ffffffffffffffffffffffffffffffffffffffff167f4b33dafb50dac5530c30aca4e4069fd67a18220888b874b8519558d1769d49a18484604051611480929190614d00565b60405180910390a2505050565b6114b77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8b565b6114f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ed9061427b565b60405180910390fd5b600e60009054906101000a900460ff1615600e60006101000a81548160ff021916908315150217905550600e60009054906101000a900460ff1661153b576000611555565b610e10816115499190614d53565b426115549190614d95565b5b600f819055507f9077d36bc00859b5c3f320310707208543dd35092cb0a0fe117d0c6a558b148b600e60009054906101000a900460ff1660405161159991906133ca565b60405180910390a150565b600e60009054906101000a900460ff1681565b60006115e37fc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de6883611d8b565b801561163e5750600760000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff165b9050919050565b60608173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806116a757506116a67fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611d8b565b5b806116d857506116d77f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f33611d8b565b5b611717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170e90614e15565b60405180910390fd5b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461176190614a26565b80601f016020809104026020016040519081016040528092919081815260200182805461178d90614a26565b80156117da5780601f106117af576101008083540402835291602001916117da565b820191906000526020600020905b8154815290600101906020018083116117bd57829003601f168201915b50505050509050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6000600473__$f25c482e92a731d9ed43127d815f1df244$__63c5f5d36f90916040518263ffffffff1660e01b81526004016118469190614e35565b602060405180830381865af4158015611863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118879190614e50565b905090565b600e60009054906101000a900460ff1680156118aa5750600f544210155b156118cb576000600e60006101000a81548160ff0219169083151502179055505b600e60009054906101000a900460ff161561191b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611912906142e7565b60405180910390fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156119a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199f90614ec9565b60405180910390fd5b6119d27f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed33613011565b506001600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fc9fa2003fca4ce0dfc8cb0deae32266b715536df6685365b05b5be96ede8e49c60405160405180910390a2565b611a78613296565b600773__$f25c482e92a731d9ed43127d815f1df244$__6326dd7c369091846040518363ffffffff1660e01b8152600401611ab4929190614701565b600060405180830381865af4158015611ad1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611afa9190614f85565b9050919050565b6000600160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b8180549050811015611ca4578273ffffffffffffffffffffffffffffffffffffffff16828281548110611b8057611b7f614fce565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015611c035750818181548110611be357611be2614fce565b5b906000526020600020906006020160050160009054906101000a900460ff165b15611c97576000828281548110611c1d57611c1c614fce565b5b906000526020600020906006020160050160006101000a81548160ff021916908315150217905550818181548110611c5857611c57614fce565b5b9060005260206000209060060201600001547f91ff4d16576040b78e69b4d9da7512a6b24c63472eb50154802f3e3f4ed5500e60405160405180910390a25b8080600101915050611b4a565b50600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611d2d91906132b9565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f825c8be24eb0df19500f63e86c29e7d0d951e73056b889b891d85e40938d9b6e60405160405180910390a35050565b6000611d97838361311e565b905092915050565b6060611dcb7f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed33611d8b565b611e0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0190615049565b60405180910390fd5b600173__$fa020a500783576cb949474ac6940fd299$__63307f87169091336040518363ffffffff1660e01b8152600401611e46929190615069565b600060405180830381865af4158015611e63573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e8c9190615325565b905090565b600a6020528060005260406000206000915054906101000a900460ff1681565b6060600773__$f25c482e92a731d9ed43127d815f1df244$__638f77b68d90916040518263ffffffff1660e01b8152600401611eed919061536e565b600060405180830381865af4158015611f0a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611f33919061544c565b905090565b600080600460000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082018054611f9890614a26565b80601f0160208091040260200160405190810160405280929190818152602001828054611fc490614a26565b80156120115780601f10611fe657610100808354040283529160200191612011565b820191906000526020600020905b815481529060010190602001808311611ff457829003601f168201915b505050505081526020016001820154815260200160028201805461203490614a26565b80601f016020809104026020016040519081016040528092919081815260200182805461206090614a26565b80156120ad5780601f10612082576101008083540402835291602001916120ad565b820191906000526020600020905b81548152906001019060200180831161209057829003601f168201915b505050505081526020016003820180546120c690614a26565b80601f01602080910402602001604051908101604052809291908181526020018280546120f290614a26565b801561213f5780601f106121145761010080835404028352916020019161213f565b820191906000526020600020905b81548152906001019060200180831161212257829003601f168201915b505050505081526020016004820160009054906101000a900460ff161515151581525050905061218f7f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f84611d8b565b801561219c575080608001515b80156121ab5750428160200151115b915050919050565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b81805490508110156123ee578382828154811061221957612218614fce565b5b906000526020600020906007020160000154036123e157600182828154811061224557612244614fce565b5b906000526020600020906007020160060160006101000a81548160ff02191690831515021790555082600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008484815481106122c2576122c1614fce565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908161233a91906154fb565b503373ffffffffffffffffffffffffffffffffffffffff1682828154811061236557612364614fce565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16857f734eac5b54039ed4ed359c7034f5c743cbea175340fc22ca139f102119991ce960405160405180910390a4505061242a565b80806001019150506121f9565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242190615619565b60405180910390fd5b5050565b6000801b81565b7f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed61245f81613102565b6124897f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f86611d8b565b6124c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124bf90615685565b60405180910390fd5b6000821161250b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612502906156f1565b60405180910390fd5b6000600173__$fa020a500783576cb949474ac6940fd299$__634f6601e0909188338989896040518763ffffffff1660e01b815260040161255196959493929190615875565b602060405180830381865af415801561256e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125929190614e50565b90503373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16827fefe5b72062702550465fdc2e5b73521c231f083cba1fd798d285715f9f483d6e86426125f09190614d95565b89896040516126019392919061599b565b60405180910390a4505050505050565b7f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f61263b81613102565b60006001600201549050600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020014281526020016000151581525090806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030190816127bc91906159cd565b5060808201518160040190816127d291906159cd565b5060a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555050506001600201600081548092919061281590615a9f565b91905055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16827fc0d9df9d6d8acee28356fcc24c0de4597104943515c4c0b12fb3d6b1ca74b0ee60405160405180910390a45050505050565b7f72606200fac42b7dc86b75901d61ecfab2a4a1a6eded478b97a428094891abed81565b60606128cc7f0af1dac7dea2fd7f7738119cec7df099dfad49aa9d2e7d17ba6b60f63ae7411f33611d8b565b61290b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290290615b33565b60405180910390fd5b600173__$fa020a500783576cb949474ac6940fd299$__635af180509091336040518363ffffffff1660e01b8152600401612947929190615069565b600060405180830381865af4158015612964573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061298d9190615325565b905090565b600173__$fa020a500783576cb949474ac6940fd299$__63682ff3219091843387866040518663ffffffff1660e01b81526004016129d4959493929190615b53565b60006040518083038186803b1580156129ec57600080fd5b505af4158015612a00573d6000803e3d6000fd5b50505050827fe32aab36a0db5d8c977134f45af8266890345c66229dd59f9ecdf663668d47318242612a329190614d95565b604051612a3f9190613aeb565b60405180910390a2505050565b7fc2d498fa6734073871a6dde33c56174c52423804118e0d5b66171fad3494de6881565b6060600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015612d0257838290600052602060002090600702016040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054612bba90614a26565b80601f0160208091040260200160405190810160405280929190818152602001828054612be690614a26565b8015612c335780601f10612c0857610100808354040283529160200191612c33565b820191906000526020600020905b815481529060010190602001808311612c1657829003601f168201915b50505050508152602001600482018054612c4c90614a26565b80601f0160208091040260200160405190810160405280929190818152602001828054612c7890614a26565b8015612cc55780601f10612c9a57610100808354040283529160200191612cc5565b820191906000526020600020905b815481529060010190602001808311612ca857829003601f168201915b50505050508152602001600582015481526020016006820160009054906101000a900460ff16151515158152505081526020019060010190612ad1565b505050509050919050565b6000600773__$f25c482e92a731d9ed43127d815f1df244$__63f3208c1e90916040518263ffffffff1660e01b8152600401612d49919061536e565b602060405180830381865af4158015612d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8a9190614e50565b905090565b612d9882610d2e565b612da181613102565b612dab8383613188565b8173ffffffffffffffffffffffffffffffffffffffff16837fcfb95b05744d1dc2a42dc08bf4bd2ed68f381aeac3c9b1a6250a6120e236ba8860405160405180910390a3505050565b6060600473__$f25c482e92a731d9ed43127d815f1df244$",
  "libraries": {
    "PermissionsLib": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "RegistryLib": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  },
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 610,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "permissions",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AccessPermissionStorage)2066_storage"
      },
      {
        "astId": 613,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "doctors",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(DoctorRegistry)2653_storage"
      },
      {
        "astId": 616,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "pharmacists",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(PharmacistRegistry)2666_storage"
      },
      {
        "astId": 620,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "patientRegistry",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 624,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "patientDataCIDs",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 630,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "accessRequests",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_struct(AccessRequest)1642_storage)dyn_storage)"
      },
      {
        "astId": 636,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "accessKeys",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bytes_storage))"
      },
      {
        "astId": 639,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "emergencyPause",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 641,
        "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
        "label": "pauseExpiry",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AccessPermission)1601_storage)dyn_storage": {
        "base": "t_struct(AccessPermission)1601_storage",
        "encoding": "dynamic_array",
        "label": "struct IMedicalAccess.AccessPermission[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AccessRequest)1642_storage)dyn_storage": {
        "base": "t_struct(AccessRequest)1642_storage",
        "encoding": "dynamic_array",
        "label": "struct IMedicalAccess.AccessRequest[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(AccessPermission)1601_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMedicalAccess.AccessPermission[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(AccessPermission)1601_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(AccessRequest)1642_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMedicalAccess.AccessRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(AccessRequest)1642_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bytes_storage)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(DoctorProfile)1612_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMedicalAccess.DoctorProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(DoctorProfile)1612_storage"
      },
      "t_mapping(t_address,t_struct(PharmacistProfile)1619_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMedicalAccess.PharmacistProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(PharmacistProfile)1619_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AccessPermission)1601_storage": {
        "encoding": "inplace",
        "label": "struct IMedicalAccess.AccessPermission",
        "members": [
          {
            "astId": 1589,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "requestId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1591,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "doctor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1593,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "patient",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1595,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "expiryTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1598,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "dataFields",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 1600,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "isActive",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(AccessPermissionStorage)2066_storage": {
        "encoding": "inplace",
        "label": "struct PermissionsLib.AccessPermissionStorage",
        "members": [
          {
            "astId": 2057,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "patientPermissions",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_array(t_struct(AccessPermission)1601_storage)dyn_storage)"
          },
          {
            "astId": 2063,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "doctorPermissions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_array(t_struct(AccessPermission)1601_storage)dyn_storage)"
          },
          {
            "astId": 2065,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "nextRequestId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AccessRequest)1642_storage": {
        "encoding": "inplace",
        "label": "struct IMedicalAccess.AccessRequest",
        "members": [
          {
            "astId": 1629,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1631,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "doctor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1633,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "patient",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1635,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "doctorName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1637,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "hospital",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1639,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1641,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "fulfilled",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(DoctorProfile)1612_storage": {
        "encoding": "inplace",
        "label": "struct IMedicalAccess.DoctorProfile",
        "members": [
          {
            "astId": 1603,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "licenseHash",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1605,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "expiryDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1607,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1609,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "specialization",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1611,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "isActive",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(DoctorRegistry)2653_storage": {
        "encoding": "inplace",
        "label": "struct RegistryLib.DoctorRegistry",
        "members": [
          {
            "astId": 2645,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "doctorRegistry",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(DoctorProfile)1612_storage)"
          },
          {
            "astId": 2649,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "doctorIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2652,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "doctorList",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PharmacistProfile)1619_storage": {
        "encoding": "inplace",
        "label": "struct IMedicalAccess.PharmacistProfile",
        "members": [
          {
            "astId": 1614,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "pharmacyId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1616,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "pharmacyName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1618,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "isVerified",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PharmacistRegistry)2666_storage": {
        "encoding": "inplace",
        "label": "struct RegistryLib.PharmacistRegistry",
        "members": [
          {
            "astId": 2658,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "pharmacistRegistry",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(PharmacistProfile)1619_storage)"
          },
          {
            "astId": 2662,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "pharmacistIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2665,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "pharmacistList",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/access/MedicalAccess.sol:MedicalAccess",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}